{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my site","text":"<p>This is my new site.</p> \u8fd9\u662f note \u7c7b\u578b\u7684\u63d0\u793a\u6846 <p>\u63d0\u793a\uff1a\u66f4\u591a\u7cbe\u5f69\u5185\u5bb9\u8bb0\u5f97\u5173\u6ce8\u6211\u554a</p> <pre><code>\u7b2c\u4e8c\u884c\n\n\u7b2c\u4e09\u884c\n\n\u7b2c\u56db\u884c\n\n\u7b2c\u4e94\u884c\n...\n</code></pre> <p>\u8fd9\u662f note \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u63d0\u793a\uff1a\u66f4\u591a\u7cbe\u5f69\u5185\u5bb9\u8bb0\u5f97\u5173\u6ce8\u6211\u554a</p> <p>\u8fd9\u662f success \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u6210\u529f\uff01</p> <p>\u8fd9\u662f failure \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u5931\u8d25\uff01</p> <p>\u8fd9\u662f bug \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u53d1\u73b0\u4e00\u4e2a bug\uff0c\u8bf7\u5c3d\u5feb\u4fee\u590d\uff01</p>"},{"location":"program-languages/cpp/cpp-pat-a1065/","title":"\u9898\u89e3\u4ee3\u7801\u94fe\u63a5","text":"<p>A1065 A+B and C(64bit)</p>"},{"location":"program-languages/cpp/cpp-pat-a1065/#_2","title":"\u9898\u76ee\u8bf4\u660e","text":"<p>\u6b64\u9898\u662f\u8003\u5bdf\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u672c\u5e94\u8be5\u662f\u8f83\u4e3a\u5bb9\u6613\u7684\u9898\u3002\u4f46\u662f\u7531\u4e8e\u6211\u73b0\u5728\u662f\u5728\u5b66\u4e60c++\u4e2d\uff0c\u5e72\u5565\u90fd\u7528<code>cin</code>/<code>cout</code>\u3002 \u53d1\u73b0\u63d0\u4ea4\u8fd9\u4e2a\u9898\u7684\u65f6\u5019\uff0c\u7b2c\u4e09\u4e2a\u6d4b\u8bd5\u70b9\u7528<code>cin</code>\u8fc7\u4e0d\u53bb\uff0c\u7528<code>scanf</code>\u5c31\u8fc7\u53bb\u4e86\u3002\u4e8e\u662f\u5c31\u60f3\u7740\u63a2\u7a76\u4e00\u756a</p>"},{"location":"program-languages/cpp/cpp-pat-a1065/#cin-scanf","title":"cin \u4e0e scanf \u63a2\u7a76","text":"<p>\u901a\u8fc7\u67e5\u9605\u8d44\u6599\u5f97\u77e5\uff0c<code>cin</code>\u662f\u67094\u4e2a\u6761\u4ef6\u72b6\u6001\u91cf\u7684\uff1a</p> <pre><code>goodbit:\u65e0\u9519\u8bef\neofbit:\u5df2\u5230\u8fbe\u6587\u4ef6\u5c3e\nfailbit:\u975e\u81f4\u547d\u7684\u8f93\u5165/\u8f93\u51fa\u9519\u8bef\uff0c\u53ef\u633d\u56de\nbadbit:\u81f4\u547d\u7684\u8f93\u5165/\u8f93\u51fa\u9519\u8bef,\u65e0\u6cd5\u633d\u56de\n</code></pre> <p>\u800c\u50cf\u8fd9\u79cd\u8f93\u5165\u683c\u5f0f\u4e0d\u7b26\u5408\u6d41\u8bbe\u7f6e\u7684\u683c\u5f0f\u5219\u51fa\u9519\uff0c\u5982<code>cin</code>\u4e00\u4e2a<code>int</code>\u6570\u636e\uff0c\u4f46\u662f\u5176\u503c\u4e3a\\(2^{31}\\)=2147483648\uff0c\u4ea7\u751f\u4e0a\u6ea2\u3002</p> <ul> <li> <p><code>cin</code>\u7684\u5904\u7406</p> <p>\u6b64\u65f6<code>failbit</code>\u5c06\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u8868\u793a\u51fa\u9519\uff0c\u4e14\u6b64\u65f6<code>cin</code>\u8f93\u5165\u7684\u6570\u636e\u4ee5\u51681\u8868\u793a\u51fa\u9519\uff0c\u6b64\u5904\u5373\u4e3a\\(2^{31}-1\\)=2147483647\u3002 - <code>scanf</code>\u7684\u5904\u7406</p> <p>\u6b64\u65f6\u8f93\u5165\u7684\u503c\u4e3a\\(-2^{31}\\)\uff0c\u5373-2147483648</p> </li> </ul> <p><code>cin</code>\u8fd4\u56defalse\u5219\u51fa\u9519\uff0c\u53ef\u4ee5\u68c0\u6d4b\u51fa\u8fd9\u79cdfailbit\u51fa\u9519\uff0c\u5373\u7528<code>cin.fail()</code>\u3002\u82e5<code>failbit</code>\u88ab\u8bbe\u7f6e\u4e86\uff0c\u5219\u8fd4\u56de<code>true</code>\u3002\u6355\u83b7\u5230\u9519\u8bef\u540e\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7<code>cin.clear()</code>\u6e05\u9664\u72b6\u6001\u6807\u5fd7\u4f4d\uff0c\u5373\u53ef\u4ee5\u633d\u56de\u3002\u6b64\u65f6\u53ef\u7ee7\u7eed\u8f93\u5165\u65b0\u7684\u503c\u5b58\u5165\u521a\u624d\u8981\u5b58\u5165\u7684\u53d8\u91cf\u4e2d\uff0c\u4e4b\u524d\u7684\u9519\u8bef\u8f93\u5165\u5219\u88ab\u4e22\u5f03\uff08\u8fd9\u4e00\u70b9\u6211\u5176\u5b9e\u6709\u5728\u67e5\u627e\u80fd\u5426\u4e0d\u4e22\u5f03\uff0c\u91cd\u65b0\u5229\u7528\uff0c\u4f46\u6ca1\u6709\u627e\u5230\u8fd9\u65b9\u9762\u4f46\u8d44\u6599\ud83d\ude43\uff09 \u82e5\u4e0d\u6e05\u9664\u72b6\u6001\u6807\u5fd7\u4f4d\uff0c\u5219\u540e\u7eed\u4e0d\u80fd\u7ee7\u7eed\u8fdb\u884c\u8f93\u5165 \u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4f7f\u7528<code>int</code>\u662f\u53ef\u4ee5\u6d4b\u51fa\u8fd9\u4e2a\u5dee\u522b\u7684\uff0c\u4f46\u6b64\u9898\u662f\u7528<code>long long</code>\u578b\u7684\uff0c\u6216\u8bb8\u662f\u56e0\u4e3a\u76ee\u524d\u673a\u5668\uff08\u5305\u62ecoj\uff09\u57fa\u672c\u90fd\u662f64\u4f4d\u7684\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u5bf9<code>long long</code>\u7684\u6ea2\u51fa\u5904\u7406<code>cin</code>\u548c<code>scanf</code>\u662f\u4e00\u6837\u7684\u3002</p> <p>\u6d4b\u8bd5\u5982\u56fe </p> <p>\u663e\u800c\u6613\u89c1\uff0c<code>cin</code>\u4e0e<code>scanf</code>\u7684\u5dee\u5f02\u4e4b\u5904</p> <p>\u5bf9\u4e86\uff0c\u5bf9\u4e8e\u6548\u7387\u8fd9\u65b9\u9762\uff0c<code>cin</code>\u82e5\u4f7f\u7528\u4e86<code>cin.sync_with_stdio(false)</code>\u5173\u95ed\u540c\u6b65\uff0c\u5373\u53ef\u8ddf<code>scanf</code>\u6548\u7387\u5dee\u4e0d\u591a\u3002</p>"},{"location":"program-languages/cpp/cpp/","title":"C++ Memo","text":""},{"location":"program-languages/cpp/cpp/#_1","title":"\u7a0b\u5e8f\u7684\u7f16\u8bd1\u548c\u8fd0\u884c","text":"<ul> <li>\u5e38\u7528\u7684c++\u7f16\u8bd1\u5668\u662fGNU\u7f16\u8bd1\u5668\uff08\u8fd8\u6709\u5fae\u8f6f\u7684Visual Studio\u7f16\u8bd1\u5668\uff09</li> <li>\u9ed8\u8ba4\u8fd0\u884cGNU\u547d\u4ee4\u662f<code>g++</code>:     <code>$ g++ proc.cpp -o proc_name</code>     \u5176\u4e2d<code>g++</code>\u8c03\u7528GNU\u7f16\u8bd1\u5668\uff0c<code>proc.cpp</code>\u662f\u6211\u4eec\u5199\u7684\u7a0b\u5e8f\u540d\uff0c<code>-o proc_name</code>\u662f\u7f16\u8bd1\u5668\u53c2\u6570\uff0c\u8868\u793a\u7f16\u8bd1\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6587\u4ef6\u540d--<code>proc_name</code>     \u82e5\u4e0d\u52a0-o\u53c2\u6570\uff0c\u5219win\u4e0b\u9ed8\u8ba4\u751f\u6210<code>a.exe</code>\u6587\u4ef6\uff0cunix\u4e0b\u751f\u6210<code>a.out</code>\u6587\u4ef6</li> <li>\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6     win\u4e0b\u901a\u8fc7 <code>.\\a</code>\u8fd0\u884c<code>a.exe</code>--\u540e\u7f00\u53ef\u4ee5\u7701\u7565     unix\u4e0b\u901a\u8fc7<code>./a.out</code>\u8fd0\u884c<code>a.out</code></li> <li>\u83b7\u53d6\u7a0b\u5e8f\u8fd4\u56de\u503c     \u8fd0\u884c\u540e\u901a\u8fc7<code>echo</code>\u547d\u4ee4\u83b7\u53d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u503c     win\u4e0b\u952e\u5165<code>$ echo $ERRORLEVEL%</code>     unix\u4e0b\u952e\u5165<code>$ echo $?</code></li> </ul> <p>\u6ce8\uff1a \u547d\u4ee4\u4e2d\u7684\u7b2c\u4e00\u4e2a$\u662f\u7cfb\u7edf\u63d0\u793a\u7b26\uff0c\u4e0d\u7528\u8f93\u5165</p>"},{"location":"program-languages/cpp/cpp/#_2","title":"\u58f0\u660e\u4e0e\u5b9a\u4e49\u7684\u5173\u7cfb","text":"<ul> <li> <p>\u6982\u5ff5\u4e0a\u770b</p> <ol> <li>\u58f0\u660e\u662f\u4f7f\u540d\u5b57\u88ab\u7a0b\u5e8f\u6240\u77e5\uff0c\u544a\u8bc9\u7a0b\u5e8f\u53c8\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u53d8\u91cf/\u51fd\u6570\uff0c\u89c4\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u548c\u540d\u5b57\uff0c\u5e76**\u4e0d\u5206\u914d\u5b58\u50a8\u7a7a\u95f4**\u3002</li> <li>\u5b9a\u4e49\u662f\u8d1f\u8d23\u521b\u5efa\u4e8e\u540d\u5b57\u5173\u8054\u7684\u5b9e\u4f53\uff0c\u4e0d\u4ec5\u89c4\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\u548c\u540d\u5b57\uff0c\u8fd8\u4f1a\u7ed9\u8fd9\u4e2a\u53d8\u91cf**\u7533\u8bf7\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e5f\u53ef\u80fd\u4f1a\u9ed8\u8ba4\u8d4b\u521d\u503c**\u3002</li> </ol> </li> <li> <p>\u53d8\u91cf\u80fd\u4e14\u53ea\u80fd\u88ab\u5b9a\u4e49\u4e00\u6b21\uff0c\u4f46\u53ef\u4ee5\u88ab\u591a\u6b21\u58f0\u660e</p> </li> <li> <p>\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u800c\u975e\u5b9a\u4e49\uff0c\u5219\u9700\u8981\u5728\u53d8\u91cf\u540d\u524d\u52a0\u5173\u952e\u5b57<code>extern</code>\uff0c\u4e14\u4e0d\u8981\u663e\u793a\u521d\u59cb\u5316\uff0c\u4e00\u65e6\u521d\u59cb\u5316\u5c31\u62b5\u6d88\u4e86<code>extern</code>\u7684\u4f5c\u7528\uff0c\u53d8\u6210\u4e86\u5b9a\u4e49</p> <pre><code>//\u58f0\u660e\u4e86\u6574\u578b\u53d8\u91cfi,\u4e0d\u662f\u5b9a\u4e49\nextern int i;\n//\u58f0\u660e\u5e76\u4e14\u5b9a\u4e49\u4e86\u6574\u578b\u53d8\u91cfj,\u5206\u914d\u4e86\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e00\u822c\u9ed8\u8ba4\u8d4b\u521d\u503c\nint j;\n//\u663e\u793a\u521d\u59cb\u5316\u62b5\u6d88\u4e86extern\u7684\u4f5c\u7528\uff0c\u6b64\u4e3a\u5b9a\u4e49\nextern double pi = 3.1416;\n</code></pre> </li> </ul>"},{"location":"program-languages/cpp/cpp/#const","title":"\u5f15\u7528\u548c\u6307\u9488\u53caconst","text":"<ul> <li>\u5f15\u7528(refers to)\uff0c\u5373\u522b\u540d\u3002\u7a0b\u5e8f\u5c06\u5f15\u7528\u548c\u5b83\u7684\u521d\u59cb\u503c\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u800c\u4e0d\u662f\u5c06\u521d\u59cb\u503c\u62f7\u8d1d\u7ed9\u5f15\u7528\u3002\u5f15\u7528\u4e0d\u662f\u5bf9\u8c61\uff0c\u5fc5\u987b\u521d\u59cb\u5316\u3002</li> <li> <p>\u6307\u9488(point to)\uff0c\u672c\u8eab\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5141\u8bb8\u5bf9\u6307\u9488\u8d4b\u503c\u548c\u62f7\u8d1d\uff0c\u65e0\u9700\u5728\u5b9a\u4e49\u65f6\u8d4b\u521d\u503c</p> <p>c++\u7684\u7a7a\u6307\u9488\u5b57\u9762\u503c\u4e3a<code>nullptr</code>\uff0c\u5b83\u53ef\u4ee5\u8f6c\u6362\u6210\u4efb\u610f\u5176\u4ed6\u7684\u6307\u9488\u7c7b\u578b</p> </li> <li> <p><code>const</code>\u9650\u5b9a\u7b26\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cconst\u5bf9\u8c61\u4ec5\u5728\u6587\u4ef6\u5185\u6709\u6548\uff0c\u82e5\u60f3\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u5171\u4eabconst\u5bf9\u8c61\uff0c\u5219\u9700\u8981\u5728\u5b9a\u4e49\u524d\u52a0<code>extern</code>\u5173\u952e\u5b57</p> </li> <li> <p>\u5bf9<code>const</code>\u5bf9\u5f15\u7528\uff1a<code>const type &amp;</code>\uff0c\u53c8\u79f0\"\u5e38\u91cf\u5f15\u7528\"\u3002</p> <pre><code>const int ci = 1024;const int &amp;r1 = ci; // \u6b63\u786e\uff0c\u6b64\u65f6r1\u5373\u4e3aconst\u5e38\u91cfci\u7684\u5f15\u7528\uff0c\u4e0d\u53ef\u901a\u8fc7r1\u6539\u53d8ci\u7684\u503c\nint &amp;r = ci; // \u51fa\u9519\uff0c\u4e0d\u80fd\u5c06\u666e\u901a\u7684\u5f15\u7528&amp;\u7ed1\u5b9a\u5230const\u5e38\u91cf\u4e0a\n</code></pre> </li> <li> <p>const\u578b\u6307\u9488<code>type *const</code>\uff1a\u9876\u5c42const**\u8868\u793a\u6307\u9488/\u5bf9\u8c61\u672c\u8eab\u662f\u4e2a\u5e38\u91cf\uff0c**\u5e95\u5c42const**\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u5bf9\u8c61\u662f\u4e2a\u5e38\u91cf--**\u7528\u4e8e\u58f0\u660e\u5f15\u7528\u7684const\u90fd\u662f\u5e95\u5c42const</p> <p>\u5e95\u5c42const\u7684\u9650\u5236\uff1a\u6267\u884c\u5bf9\u8c61\u7684\u62f7\u8d1d\u64cd\u4f5c\u65f6\uff0c\u62f7\u5165\u548c\u62f7\u51fa\u7684\u5bf9\u8c61\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u5e95\u5c42const\u8d44\u683c--\u6307\u5411\u7684\u662f\u4e2a\u5e38\u91cf\uff0c\u6216\u8005\u4e24\u4e2a\u5bf9\u8c61\u7684\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u53ef\u4ee5\u8f6c\u6362\uff08\u5982\uff0c\u975e\u5e38\u91cf\u53ef\u4ee5\u8f6c\u6362\u6210\u5e38\u91cf\uff0c\u53cd\u4e4b\u4e0d\u884c\uff09</p> </li> <li> <p>\u4e00\u4e2a\u6307\u9488\u53ef\u4ee5\u540c\u65f6\u662f\u9876\u5c42const\u548c\u5e95\u5c42const\uff0c\u5982</p> <pre><code>const int *const p1 = p;\n// \u9760\u53f3\u7684const\u662f\u9876\u5c42const--\u81ea\u8eab\u662f\u5e38\u91cf\uff0c\u9760\u5de6\u7684\u662f\u5e95\u5c42\nconstcont int &amp;r = i; // r\u662f\u5e95\u5c42const\n</code></pre> </li> <li> <p>c++11\u53ef\u4ee5\u901a\u8fc7\u5c06\u53d8\u91cf\u58f0\u660e\u4e3a<code>constexpr</code>\u7c7b\u578b\uff0c\u4f7f\u7f16\u8bd1\u5668\u81ea\u5df1\u9a8c\u8bc1\u53d8\u91cf\u662f\u5426\u4e3a\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff08\u5b57\u9762\u503c\u4e5f\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff09\uff0c\u5f53\u7136\uff0c\u58f0\u660e\u65f6\u5fc5\u987b\u7528\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u3002\u9650\u5b9a\u7b26<code>constexpr</code>\u4ec5\u5bf9\u6307\u9488/\u5bf9\u8c61\u6709\u6548\uff0c\u5bf9\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u65e0\u5173\uff0c\u5373\u662f**\u9876\u5c42const**</p> </li> </ul>"},{"location":"program-languages/cpp/cpp/#type-alias","title":"\u7c7b\u578b\u522b\u540d(type alias)","text":"<ul> <li> <p>\u4f20\u7edf\u65b9\u6cd5\uff1a\u4f7f\u7528\u5173\u952e\u5b57<code>typedef</code></p> <p>typedef double wages; // wages\u662fdouble\u7684\u540c\u4e49\u8bcd(synonym)</p> </li> <li> <p>C++\u65b0\u6807\u51c6\uff1a\u4f7f\u7528\u5173\u952e\u5b57<code>using</code></p> <p>using SI = Sales_item; // SI\u662fSales_item\u7684\u540c\u4e49\u8bcd</p> </li> <li> <p><code>auto</code>\uff1a\u7f16\u8bd1\u5668\u5206\u6790\u8868\u8fbe\u5f0f\u6240\u5c5e\u7684\u7c7b\u578b\uff0cauto\u5b9a\u4e49\u7684\u53d8\u91cf\u5fc5\u987b\u6709\u521d\u59cb\u503c\uff0c\u4e00\u822c\u5ffd\u7565\u9876\u5c42const</p> </li> <li> <p><code>decltype</code>\uff1a\u9009\u62e9\u5e76\u8fd4\u56de\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u5206\u6790\u5f97\u5230\u7c7b\u578b\uff0c\u800c\u4e0d\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u503c</p> <pre><code>decltype(f()) sum = x; // sum\u7c7b\u578b\u4e3a\u51fd\u6570f\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u5e76\u4e0d\u8c03\u7528f\n// decltype((variable))\u7684\u7ed3\u679c\u6c38\u8fdc\u662f\u5f15\u7528\uff0c\u800cdecltype(variable)\u7ed3\u679c\u53ea\u6709\u5f53variable\u672c\u8eab\u662f\u5f15\u7528\u65f6\u624d\u662f\u5f15\u7528\n</code></pre> </li> </ul>"},{"location":"program-languages/rust/rust/","title":"Rust","text":""},{"location":"solutions/pat/ab-and-c-64bit/","title":"A+B and C (64bit)","text":"<p>\u9898\u76ee\u94fe\u63a51065 A+B and C (64bit) (20 \u5206)</p>"},{"location":"solutions/pat/ab-and-c-64bit/#cin","title":"\u4e0d\u80fd\u7528cin\u7684\u539f\u56e0","text":"<p>\u94fe\u63a5\uff1a [C++]--PAT-A1065 &amp; cin\u4e0escanf</p>"},{"location":"solutions/pat/ab-and-c-64bit/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u51fa\u4e09\u4e2a64\u4f4d\u7684\u6574\u6570\uff0cA,B,C\uff0c\u5224\u65ad\\(A+B&gt;C\\)\u662f\u5426\u6210\u7acb</p>"},{"location":"solutions/pat/ab-and-c-64bit/#_2","title":"\u601d\u8def","text":"<p>\u4f7f\u7528<code>long long</code>\u5b58\u50a8\uff0c\u8fdb\u884c\u5224\u65ad\u8ba1\u7b97\u5373\u53ef\u3002</p>"},{"location":"solutions/pat/ab-and-c-64bit/#_3","title":"\u95ee\u9898","text":"<p>\u6b64\u9898\u7528<code>cin</code>\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u8fc7\u4e0d\u4e86\uff0c\u53ea\u80fd\u7528<code>scanf</code>\u5177\u4f53\u5206\u6790\u89c1 [C++]--PAT-A1065 &amp; cin\u4e0escanf</p>"},{"location":"solutions/pat/ab-and-c-64bit/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int T;\n    cin &gt;&gt; T;\n    for (auto k = 0; k != T; ++k) {\n        long long a, b, c;\n        // cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        scanf(\"%lld%lld%lld\", &amp;a, &amp;b, &amp;c);\n        auto res = a + b;\n        bool flag;\n        if (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; res &lt; 0)\n            flag = true;\n        else if (a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; res &gt;= 0)\n            flag = false;\n        else if (res &gt; c)\n            flag = true;\n        else\n            flag = false;\n        if (flag)\n            cout &lt;&lt; \"Case #\" &lt;&lt; k + 1 &lt;&lt; \": true\" &lt;&lt; endl;\n        else\n            cout &lt;&lt; \"Case #\" &lt;&lt; k + 1 &lt;&lt; \": false\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/ab-for-polynomials/","title":"A+B for Polynomials","text":"<p>\u9898\u76ee\u94fe\u63a51002 A+B for Polynomials (25 \u5206)</p>"},{"location":"solutions/pat/ab-for-polynomials/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8ba1\u7b97\u591a\u9879\u5f0f\u7684\u52a0\u6cd5\uff0c\u8981\u6c42\u8f93\u51fa\u9879\u6570\u4ee5\u53ca\u5404\u9879\u7684\u6307\u6570\u3001\u7cfb\u6570</p>"},{"location":"solutions/pat/ab-for-polynomials/#_2","title":"\u601d\u8def","text":"<p>\u4e0d\u96be\uff0c\u6211\u5229\u7528\u4e86\u5f52\u5e76\u7684\u601d\u60f3\u53bb\u505a\uff0c\u5916\u52a0\u5168\u90e8\u4f7f\u7528<code>c++</code>\u7684\u65b9\u5f0f\u7f16\u5199\uff0c\u9700\u8981\u6ce8\u610f\u7684\u51e0\u4e2a\u70b9</p> <ol> <li>\u76f8\u52a0\u7cfb\u6570\u4e3a0\u7684\u9879\u4e0d\u80fd\u8f93\u51fa</li> <li>\u5f52\u5e76(\u5047)\uff0c\u82e5A\u548cB\u90fd\u904d\u5386\u5b8c\u4e86\u4e5f\u8981\u8f93\u51fa\u7ed3\u679c\uff0c\u8fd9\u4e2a\u6211\u6700\u521d\u5fd8\u8bb0\u4e86</li> <li>cout\u7684\u683c\u5f0f\u5316\u8f93\u51fa\u7ed3\u679c\uff0c\u8981\u786e\u4fdd\u8f93\u51fa\u7684\u7cfb\u6570\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570</li> </ol> <p>\u8f93\u51fan\u4f4d\u5c0f\u6570\u7684\u63a7\u5236\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;iomanip&gt;//\u9700\u8981\u7684\u5934\u6587\u4ef6\n\nint n = 2;\nstd::cout &lt;&lt; setiosflags(std::ios::fixed) &lt;&lt; setprecision(n);\n//\u540e\u9762cout\u8f93\u51fa\u7684\u6570\u5c31\u4fdd\u7559\u4e86n\u4f4d\u5c0f\u6570\n</code></pre>"},{"location":"solutions/pat/ab-for-polynomials/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n// \u6839\u636e\u8f93\u5165\u7684\u9879\u6570\uff0c\u63a5\u53d7\u8f93\u5165\nvoid input(vector&lt;int&gt;&amp; index, vector&lt;double&gt;&amp; value, const int k)\n{\n    int    a;\n    double b;\n    for (auto i = 0; i &lt; k; ++i) {\n        cin &gt;&gt; a &gt;&gt; b;\n        index.push_back(a);\n        value.push_back(b);\n    }\n}\nint main()\n{\n    int            k1, k2;\n    vector&lt;int&gt;    a_index, b_index;\n    vector&lt;double&gt; a_value, b_value;\n    cin &gt;&gt; k1;\n    input(a_index, a_value, k1);\n    cin &gt;&gt; k2;\n    input(b_index, b_value, k2);\n\n    vector&lt;int&gt;    index;\n    vector&lt;double&gt; value;\n    // A\u548cB\u7684\u8fed\u4ee3\u5668\uff0c\u8bbe\u5728for\u5916\uff0c\u540e\u7eed\u8981\u7528\u5230\n    auto it1 = a_index.begin(), it2 = b_index.begin();\n    for (; it1 != a_index.end() &amp;&amp; it2 != b_index.end();) {\n        // \u9009\u53d6\u6307\u6570\u5927\u7684\u5b58\u5165\u7ed3\u679c\u5411\u91cfindex\u548cvalue\u4e2d\n        if (*it1 &gt; *it2) {\n            index.push_back(*it1);\n            value.push_back(a_value[it1 - a_index.begin()]);\n            ++it1;\n        } else if (*it1 &lt; *it2) {\n            index.push_back(*it2);\n            value.push_back(b_value[it2 - b_index.begin()]);\n            ++it2;\n        } else {\n            // \u76f8\u7b49\u65f6\u8fd8\u8981\u5224\u65ad\u548c\u662f\u5426\u4e3a0\uff0c\u82e5\u4e3a0\u5219\u4e0d\u52a0\u5165\u7ed3\u679c\u5411\u91cf\u4e2d\n            if (a_value[it1 - a_index.begin()] + b_value[it2 - b_index.begin()]) {\n                index.push_back(*it1);\n                value.push_back(a_value[it1 - a_index.begin()] + b_value[it2 - b_index.begin()]);\n            }\n            ++it1;\n            ++it2;\n        }\n    }\n    // \u9000\u51fafor\u5faa\u73af\u76843\u79cd\u60c5\u51b5\uff0c\u90fd\u8981\u8003\u8651\u5230\n    // cout\u8f93\u51fan\u4f4d\u5c0f\u6570\u65b9\u6cd5\uff0c\u5148\u8bbe\u7f6efixed\u5728\u8bbe\u7f6e\u7cbe\u5ea6\n    if (it1 != a_index.end()) {\n        cout &lt;&lt; index.size() + a_index.end() - it1;\n        for (auto it = index.begin(); it != index.end(); ++it)\n            cout &lt;&lt; \" \" &lt;&lt; *it &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; value[it - index.begin()];\n        for (; it1 != a_index.end(); ++it1)\n            cout &lt;&lt; \" \" &lt;&lt; *it1 &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; a_value[it1 - a_index.begin()];\n    } else if (it2 != b_index.end()) {\n        cout &lt;&lt; index.size() + b_index.end() - it2;\n        for (auto it = index.begin(); it != index.end(); ++it)\n            cout &lt;&lt; \" \" &lt;&lt; *it &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; value[it - index.begin()];\n        for (; it2 != b_index.end(); ++it2)\n            cout &lt;&lt; \" \" &lt;&lt; *it2 &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; b_value[it2 - b_index.begin()];\n    } else {\n        cout &lt;&lt; index.size();\n        for (auto it = index.begin(); it != index.end(); ++it)\n            cout &lt;&lt; \" \" &lt;&lt; *it &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; value[it - index.begin()];\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/ab-format/","title":"AB-Format","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1001 A+B Format (20 point(s))</p>"},{"location":"solutions/pat/ab-format/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5c06<code>a+b</code>\u7684\u503c\u6309\u7167\u7f8e\u5f0f\uff1f\u7684\u683c\u5f0f\u8f93\u51fa</p>"},{"location":"solutions/pat/ab-format/#_2","title":"\u601d\u8def","text":"<p>\u521a\u5f00\u59cb\u6253\u7b97\u7528\u6c42\u4f59\u8fd0\u7b97\u505a\u7684\uff0c\u8349\u7387\u4e86\uff0c\u6ca1\u6709\u8003\u8651\u5230\u4e3a0\u65f6\u5e94\u8be5\u8f93\u51fa\u8fde\u7eed\u76840\uff0c\u53ea\u62ff\u4e8615\u5206\u3002\u7136\u540e\u8003\u8651\u5230\u6309\u7167\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u7528<code>to_string</code>\u51fd\u6570\uff0c\u5373\u53ef\uff0c\u9664\u4e86\u6700\u524d\u9762\u7684\uff0c\u5176\u4ed6\u6309\u71673\u4e2a\u4e00\u8f93\u51fa\u5373\u53ef\u3002</p>"},{"location":"solutions/pat/ab-format/#ac","title":"AC\u4ee3\u7801","text":"'ab_format.cpp` <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    int sum = a + b;\n    if (sum &lt; 0) {\n        cout &lt;&lt; \"-\";\n        sum = -sum;\n    }\n    string ans = to_string(sum);\n    int    m   = ans.length() % 3;\n    for (auto i = 0; i &lt; ans.length(); ++i) {\n        cout &lt;&lt; ans[i];\n        if ((i - m + 1) % 3 == 0 &amp;&amp; i != ans.length() - 1)\n            cout &lt;&lt; ',';\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/acute-stroke/","title":"Acute Stroke","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1091 Acute Stroke (30 point(s)</p>"},{"location":"solutions/pat/acute-stroke/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7406\u89e3\u9898\u610f\u5f88\u91cd\u8981\uff0c\u8fd9\u4e2a\u9898\u521a\u5f00\u59cb\u6211\u6ca1\u6709\u8bfb\u61c2\uff0c\u611f\u89c9\u8868\u8ff0\u7684\u4e0d\u6e05\u695a\uff0c\u77e5\u9053\u5f53\u6211\u7406\u89e3\u4e86<code>L</code>\u8868\u793a\u7684\u662f<code>layer</code>\u7684\u65f6\u5019\uff0c\u624d\u7ec8\u4e8e\u7406\u89e3\u9898\u76ee\u7ed9\u7684\u662f\u4e00\u4e2a\u5e95\u786e\u5b9a\u7684\u957f\u65b9\u4f53\u533a\u57df\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u4e09\u7ef4\u7a7a\u95f4\uff08\u5982\u679c\u662f\uff0c\u4e00\u76f4\u4e0d\u77e5\u9053\u600e\u4e48\u786e\u5b9a\u6bcf\u4e2a\u5207\u7247\u5728xoy\u5e73\u9762\u7684\u8054\u7cfb\uff09</p>"},{"location":"solutions/pat/acute-stroke/#_2","title":"\u601d\u8def","text":"<p>\u7406\u89e3\u4e86\u9898\u610f\u4e4b\u540e\uff0c\u5c31\u77e5\u9053\u8fd9\u4e2a\u9898\u53ef\u4ee5\u91c7\u7528<code>BFS</code>\u904d\u5386\u6bcf\u4e2a\u8fde\u901a\u57df\uff0c\u5e76\u5c06\u6bcf\u4e2a\u8fde\u901a\u57df\u4e2d1\u7684\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e<code>T</code>\u7684\u4e2a\u6570\u8bb0\u4e0b\u6765\uff0c\u6700\u540e\u8f93\u51fa\u5373\u53ef</p>"},{"location":"solutions/pat/acute-stroke/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\nconst int MaxM = 1287, MaxN = 129, MaxL = 61;\nint       pixel[MaxM][MaxN][MaxL];\nbool      status[MaxM][MaxN][MaxL]{false};\nint       M, N, L, T; // \u6ce8\u610f\u662fL\u5c42\uff0c\u6bcf\u5c42\u662fM*N\uff0c\u95e8\u69db\u662fT\n\nclass Point {\npublic:\n    int x, y, z;\n    Point(int a, int b, int c) : x(a), y(b), z(c) {}\n    ~Point() = default;\n    Point operator+(Point add) const { return Point{x + add.x, y + add.y, z + add.z}; }\n    bool  check() const\n    {\n        if (x &gt;= M '' x &lt; 0 '' y &gt;= N '' y &lt; 0 '' z &gt;= L '' z &lt; 0)\n            return false; // \u8d8a\u754c\u8fd4\u56defalse\n        if (pixel[x][y][z] == 0 '' status[x][y][z])\n            return false; // \u5f53\u524d\u975e\u80bf\u5757\u70b9\uff0c\u6216\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u8fd4\u56defalse\n        return true;\n    }\n};\nconst Point adj[6] = { // \u4e00\u4e2a\u70b9\u7684\u516d\u4e2a\u76f8\u90bb\u70b9\u7684\u79fb\u52a8\u65b9\u5411 //NOLINT\n    Point{0, 0, 1}, Point{0, 0, -1}, Point{1, 0, 0}, Point{-1, 0, 0}, Point{0, 1, 0}, Point{0, -1, 0}};\n\nint BFS(int x, int y, int z)\n{\n    int          cur = 0; // \u6b64\u6b21bfs\u4e2d\u7684\u7b26\u5408\u7684\u70b9\u7684\u4e2a\u6570\n    queue&lt;Point&gt; q;\n    Point        point{x, y, z};\n    q.push(point);\n    status[x][y][z] = true;\n    while (!q.empty()) {\n        Point top = q.front();\n        ++cur;\n        q.pop();\n        for (auto i : adj) {\n            point = top + i;\n            if (point.check()) {                          // \u7ecf\u68c0\u6d4b\uff0c\u65b0\u4f4d\u7f6e\u7b26\u5408\u8981\u6c42\n                q.push(point);                            // \u5165\u961f\n                status[point.x][point.y][point.z] = true; // \u5e76\u8bbe\u7f6e\u5df2\u7ecf\u68c0\u6d4b\u8fc7\n            }\n        }\n    }\n    if (cur &gt;= T)\n        return cur;\n    else\n        return 0;\n}\n\nint main()\n{\n    cin &gt;&gt; M &gt;&gt; N &gt;&gt; L &gt;&gt; T;\n    for (int z = 0; z &lt; L; ++z) {\n        for (int x = 0; x &lt; M; ++x) {\n            for (int y = 0; y &lt; N; ++y)\n                cin &gt;&gt; pixel[x][y][z];\n        }\n    }\n    int ans = 0;\n    for (int z = 0; z &lt; L; ++z) {\n        for (int x = 0; x &lt; M; ++x) {\n            for (int y = 0; y &lt; N; ++y)\n                // \u5f53\u524d\u4f4d\u7f6e\u4e3a1\uff0c\u4e14\u6ca1\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u4ece\u5f53\u524d\u70b9\u5f00\u59cbBFS\n                if (pixel[x][y][z] == 1 &amp;&amp; !status[x][y][z])\n                    ans += BFS(x, y, z);\n        }\n    }\n    cout &lt;&lt; ans;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/are-they-equal/","title":"Are They Equal","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1060 Are They Equal (25 point(s))</p>"},{"location":"solutions/pat/are-they-equal/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u7cbe\u5ea6\uff0c\u5224\u65ad\u4e24\u4e2a\u5b58\u50a8\u6d6e\u70b9\u6570\u7684\u5b57\u7b26\u4e32\u662f\u5426\u79d1\u5b66\u8868\u8fbe\u5f0f\u76f8\u7b49</p>"},{"location":"solutions/pat/are-they-equal/#_2","title":"\u601d\u8def","text":"<p>\u53c2\u8003\u4e86\u300a\u7b97\u6cd5\u7b14\u8bb0\u300b,\u505a\u7684\u65f6\u5019\u7531\u4e8e\u836f\u7269\uff0c\u8111\u5b50\u6655\u6655\u7684\uff0c\u4e0d\u80fd\u52a8\u8111\u5206\u6790\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u770b\u4e66\u4e86\u3002</p> <p>\u6839\u636e\u4e66\u4e2d\u5206\u6790\uff0c\u8981\u5c06\u5b57\u7b26\u4e32\u4e2d\u4fdd\u5b58\u7684\u5206\u4e3a\u5927\u4e8e1\u548c\u5c0f\u4e8e1\u4e24\u79cd\uff0c\u603b\u4f53\u4e0a\u662f\u4e00\u4e2a\u4e00\u4e2a\u5224\u65ad\uff0c\u7136\u540e\u5220\u9664\u524d\u5bfc\u96f6\u548c\u5c0f\u6570\u70b9\uff0c\u7531\u4e8e<code>erase</code>\u7684\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\uff0c\u6240\u4ee5\u6211\u91c7\u53d6\u4e86\u4e0d\u5220\u9664\u7684\u505a\u6cd5\uff0c\u5b9e\u5219\u662f\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u5220\u9664\u4e00\u6b21\uff08\u5373\u5220\u9664\u5c0f\u6570\u70b9\uff09\uff0c\u8fd0\u884c\u901f\u5ea6\u66f4\u5feb\u3002</p>"},{"location":"solutions/pat/are-they-equal/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint  n;\nbool isZero(string&amp; s)\n{\n    bool zero = true;\n    for (auto&amp; c : s) {\n        if (c != '0') {\n            zero = false;\n            break;\n        }\n    }\n    return zero;\n}\n\nvoid process(string&amp; s, int&amp; e)\n{\n    int k = 0;                            // \u8bb0\u5f55\u7b2c\u4e00\u4e2a\u4e0d\u4e3a0\u7684\u6570\u5b57\u7684\u4e0b\u6807\n    while (s.length() &gt; k &amp;&amp; s[k] == '0') // \u8df3\u8fc7\u524d\u5bfc\u96f6\n        ++k;\n    // \u53bb\u9664\u5c0f\u6570\u70b9\uff08\u5982\u679c\u6709\uff09\n    if (s[k] == '.') { // s\u4e3a\u5c0f\u4e8e1\u7684\u5c0f\u6570\n        s.erase(s.begin() + k);\n        while (s.length() &gt; k &amp;&amp; s[k] == '0') { // \u53bb\u6389\u5c0f\u6570\u70b9\u540e\u9762\u7684\u524d\u5bfc\u96f6\n            ++k;\n            --e; // \u6bcf\u53bb\u6389\u4e00\u4e2a\u6307\u6570\u51cf\u4e00\n        }\n    } else {                                          // s\u5927\u4e8e1\uff0c\u5219\u6b64\u65f6k\u5df2\u7ecf\u786e\u5b9a\u4e86\n        while (k + e &lt; s.length() &amp;&amp; s[k + e] != '.') // \u5bfb\u627e\u5c0f\u6570\u70b9\n            ++e;                // e \u662f\u6307\u6570\uff0c\u4e5f\u8868\u793a\u5c0f\u6570\u70b9\u79bb\u7b2c\u4e00\u4e2a\u4e0d\u4e3a\u96f6\u7684\u6570\u7684\u8ddd\u79bb\n        if (k + e &lt; s.length()) // \u627e\u5230\u5c0f\u6570\u70b9\uff0c\u5220\u9664\n            s.erase(s.begin() + k + e);\n    }\n    if (isZero(s)) // \u5224\u65ad\u662f\u5426\u4e3a0\n        e = 0;\n    while (s.length() - k &lt; n) // \u5982\u679c\u6709\u5fc5\u8981\uff0c\u8865\u5145\u7cbe\u5ea6\n        s += '0';\n    s = s.substr(k, n); // \u53d6n\u4e2a\u5b57\u7b26\u7ec4\u6210\u5904\u7406\u540e\u7684\u7ed3\u679c\n}\n\nint main()\n{\n    string s1, s2;\n    cin &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;\n    int e1 = 0, e2 = 0;\n    // \u5904\u7406\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u53bb\u6389\u5c0f\u6570\u70b9\uff08\u5982\u679c\u6709\uff09\uff0c\u5e76\u8ba1\u7b97\u6307\u6570e\n    // \u5373\u6700\u591a\u4ec5\u6267\u884c\u4e00\u6b21erase\n    process(s1, e1);\n    process(s2, e2);\n    if (s1 == s2 &amp;&amp; e1 == e2)\n        cout &lt;&lt; \"YES 0.\" &lt;&lt; s1 &lt;&lt; \"*10^\" &lt;&lt; e1 &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"NO 0.\" &lt;&lt; s1 &lt;&lt; \"*10^\" &lt;&lt; e1 &lt;&lt; \" 0.\" &lt;&lt; s2 &lt;&lt; \"*10^\" &lt;&lt; e2 &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/boys-vs-girls/","title":"Boys vs Girls","text":"<p>\u9898\u76ee\u94fe\u63a51036 Boys vs Girls (25 \u5206)</p>"},{"location":"solutions/pat/boys-vs-girls/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u4ecd\u662f\u5728\u8f93\u5165\u4e2d\u5904\u7406\u6570\u636e\uff0c\u627e\u6700\u5927\uff0c\u6700\u5c0f\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u5c06\u6570\u636e\u5206\u6210\u4e86\u4e24\u7c7b\uff0c\u7537\u6027\u548c\u5973\u6027</p>"},{"location":"solutions/pat/boys-vs-girls/#_2","title":"\u601d\u8def","text":"<p>\u5e38\u89c4\uff0c\u6ce8\u610f\u5224\u65ad\u662f\u5426\u5b58\u5728\u6700\u503c\u4fee\u6539\u8f93\u51fa\u683c\u5f0f</p>"},{"location":"solutions/pat/boys-vs-girls/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Student {\n    string name;\n    string id;\n    int    score;\n} male, female, temp;\n\nint main()\n{\n    male.score = 101, female.score = -1;\n    int  n;\n    char gender;\n    cin &gt;&gt; n;\n    while (n--) {\n        cin &gt;&gt; temp.name &gt;&gt; gender &gt;&gt; temp.id &gt;&gt; temp.score;\n        if (gender == 'M' &amp;&amp; temp.score &lt; male.score)\n            swap(male, temp);\n        else if (gender == 'F' &amp;&amp; temp.score &gt; female.score)\n            swap(female, temp);\n    }\n    if (female.score == -1)\n        cout &lt;&lt; \"Absent\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; female.name &lt;&lt; \" \" &lt;&lt; female.id &lt;&lt; endl;\n    if (male.score == 101)\n        cout &lt;&lt; \"Absent\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; male.name &lt;&lt; \" \" &lt;&lt; male.id &lt;&lt; endl;\n    if (female.score == -1 '' male.score == 101)\n        cout &lt;&lt; \"NA\" &lt;&lt; endl;\n    else\n        cout &lt;&lt; female.score - male.score;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/counting-leaves/","title":"Counting Leaves","text":"<p>\u9898\u76ee\u94fe\u63a51004 Counting Leaves (30 \u5206)</p>"},{"location":"solutions/pat/counting-leaves/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8f93\u51fa\u6811\u7684\u53f6\u8282\u70b9\u4e2a\u6570\u3002</p>"},{"location":"solutions/pat/counting-leaves/#_2","title":"\u601d\u8def","text":"<p>\u7528BFS\u4e5f\u5c31\u662f\u5c42\u5e8f\u904d\u5386</p>"},{"location":"solutions/pat/counting-leaves/#_3","title":"\u95ee\u9898","text":"<p>\u4e00\u4e9b\u8fed\u4ee3\u5668\u3001\u7d22\u5f15\u7684\u95ee\u9898\uff0c\u8fd8\u662f\u5199\u6ce8\u91ca\u8981\u597d\uff0c\u601d\u8def\u6e05\u6670\uff0c\u4e0d\u4f1a\u4e71</p>"},{"location":"solutions/pat/counting-leaves/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint traverse(vector&lt;vector&lt;int&gt;&gt; nodes, vector&lt;int&gt;&amp; cnt)\n{\n    queue&lt;int&gt; Q;\n    Q.push(1);\n    int         layer = 1;\n    vector&lt;int&gt; num;\n    num.push_back(nodes[1].size());\n    while (!Q.empty()) {\n        int  size = int(num.size());\n        auto p    = Q.front();\n        for (int i = 0; i &lt; size; ++i) { // num.size()\u4e3a\u5b69\u5b50\u4e2a\u6570\n            if (nodes[p].empty())\n                ++cnt[layer];\n            ++p;\n        }\n        num.clear();\n        for (int i = 0; i &lt; size; ++i) {\n            auto q = Q.front();\n            Q.pop();\n            if (!nodes[q].empty()) {\n                for (auto it = nodes[q].begin(); it != nodes[q].end(); ++it) {\n                    Q.push(*it);\n                    num.push_back(nodes[*it].size());\n                }\n            }\n        }\n        ++layer;\n    }\n    return --layer;\n}\nint main()\n{\n    int N, M;\n    cin &gt;&gt; N &gt;&gt; M;\n    vector&lt;vector&lt;int&gt;&gt; nodes(N + 1);\n    for (int i = 0; i != M; ++i) {\n        int parent, K, child;\n        cin &gt;&gt; parent &gt;&gt; K;\n        for (int j = 0; j &lt; K; ++j) {\n            cin &gt;&gt; child;\n            nodes[parent].push_back(child);\n        }\n    }\n    vector&lt;int&gt; cnt(N + 1, 0);\n    auto        layer = traverse(nodes, cnt);\n    for (auto i = 1; i &lt;= layer; ++i) {\n        cout &lt;&lt; cnt[i];\n        if (i != layer)\n            cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/course-list-for-student/","title":"Course List for Student","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1039 Course List for Student (25 point(s))</p>"},{"location":"solutions/pat/course-list-for-student/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u8bfe\u7a0b\u5bf9\u5e94\u7684\u9009\u8bfe\u5b66\u751f\uff0c\u7136\u540e\u7ed9\u4f60\u5b66\u751f\u540d\u5b57\u67e5\u8be2\u8be5\u5b66\u751f\u9009\u7684\u8bfe\u7a0b\u4fe1\u606f\u3002</p>"},{"location":"solutions/pat/course-list-for-student/#_2","title":"\u601d\u8def","text":"<p>\u4f7f\u7528<code>map</code>\uff0c\u7531\u4e8e<code>unordered_map</code>\u6548\u7387\u66f4\u9ad8\uff0c\u4f7f\u7528\u4e4b\u5efa\u7acb\u5b66\u751f\u540d\u5b57\u4e0e\u5b58\u50a8\u7684\u4e0b\u6807\u7684\u5bf9\u5e94\u5173\u7cfb\u3002</p> <p>\u5728<code>codeup</code>\u4e2d\u63d0\u4ea4\u7684\u8bdd\u4f1a\u8d85\u65f6\uff0c\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u53bb\u6389<code>map</code>\u3001\u53bb\u6389<code>cin</code>\u6539\u4e3a<code>scanf</code>\u3001\u53bb\u6389<code>cout</code>\u6539\u4e3a<code>printf</code>\u4ee5\u53ca\u5c06<code>string</code>\u6539\u4e3a<code>char</code>\u6570\u7ec4\u3002</p>"},{"location":"solutions/pat/course-list-for-student/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    int N, K;\n    cin &gt;&gt; N &gt;&gt; K;\n    vector&lt;vector&lt;int&gt;&gt;        stu;\n    unordered_map&lt;string, int&gt; map;\n    int                        k = 0;\n    for (int i = 0; i &lt; K; ++i) {\n        int id, num;\n        cin &gt;&gt; id &gt;&gt; num;\n        for (int j = 0; j &lt; num; ++j) {\n            string name;\n            cin &gt;&gt; name;\n            if (map.find(name) == map.end()) {\n                map[name] = k++;\n                stu.emplace_back();\n            }\n            stu[map[name]].emplace_back(id);\n        }\n    }\n    for (int i = 0; i &lt; N; ++i) {\n        string name;\n        cin &gt;&gt; name;\n        cout &lt;&lt; name &lt;&lt; \" \" &lt;&lt; ((map.find(name) == map.end()) ? 0 : stu[map[name]].size());\n        if (map.find(name) == map.end()) {\n            if (i != N - 1)\n                cout &lt;&lt; endl;\n            continue;\n        }\n        sort(stu[map[name]].begin(), stu[map[name]].end());\n        for (auto&amp; entry : stu[map[name]])\n            cout &lt;&lt; \" \" &lt;&lt; entry;\n        if (i != N - 1)\n            cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/dating/","title":"Dating","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1061 Dating (20 point(s))</p>"},{"location":"solutions/pat/dating/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u524d\u4e24\u4e2a\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u8868\u793a\u661f\u671f\uff0c\u7b2c\u4e8c\u4e2a\u76f8\u540c\u7684\u8868\u793a\u5c0f\u65f6\uff0c\u540e\u4e24\u4e2a\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u4f4d\u7f6e\u8868\u793a\u5206\u949f</p>"},{"location":"solutions/pat/dating/#_2","title":"\u601d\u8def","text":"<p>\u904d\u5386\uff0c\u627e\u7b26\u5408\u8981\u6c42\u7684\u5b57\u7b26\u5373\u53ef</p>"},{"location":"solutions/pat/dating/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst vector&lt;string&gt; week{\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"}; // \u7528\u4e8e\u8f6c\u6362\u661f\u671f\n\nint main()\n{\n    string str1, str2, str3, str4;\n    cin &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; str3 &gt;&gt; str4;\n    int k;\n    for (k = 0; k &lt; str1.length() &amp;&amp; k &lt; str2.length(); ++k) { // \u627e\u661f\u671f\n        if (str1[k] == str2[k] &amp;&amp; str1[k] &gt;= 'A' &amp;&amp; str1[k] &lt;= 'G') {\n            cout &lt;&lt; week[str1[k] - 'A'] &lt;&lt; \" \";\n            break;\n        }\n    }\n    for (k++; k &lt; str1.length() &amp;&amp; k &lt; str2.length(); ++k) { // \u63a5\u7740\u627e\u5c0f\u65f6\n        if (str1[k] == str2[k]) {\n            if (str1[k] &gt;= '0' &amp;&amp; str1[k] &lt;= '9') {\n                cout &lt;&lt; 0 &lt;&lt; str1[k] - '0' &lt;&lt; \":\";\n                break;\n            } else if (str1[k] &gt;= 'A' &amp;&amp; str1[k] &lt;= 'N') {\n                cout &lt;&lt; str1[k] - 'A' + 10 &lt;&lt; \":\";\n                break;\n            }\n        }\n    }\n    for (k = 0; k &lt; str3.length() &amp;&amp; k &lt; str4.length(); ++k) { // \u627e\u5206\u949f\n        if (str3[k] == str4[k]) {\n            if (str3[k] &gt;= 'A' &amp;&amp; str3[k] &lt;= 'Z' '' str3[k] &gt;= 'a' &amp;&amp; str3[k] &lt;= 'z') {\n                k &gt; 9 ? cout &lt;&lt; k : cout &lt;&lt; 0 &lt;&lt; k;\n                break;\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/deduplication-on-a-linked-list/","title":"Deduplication on a Linked List","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1097 Deduplication on a Linked List (25 point(s))</p>"},{"location":"solutions/pat/deduplication-on-a-linked-list/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u94fe\u8868\u7684\u53bb\u91cd\uff0c\u7edd\u5bf9\u503c\u76f8\u540c\u5373\u4e3a\u91cd\u590d</p>"},{"location":"solutions/pat/deduplication-on-a-linked-list/#_2","title":"\u601d\u8def","text":"<p>\u8bbe\u4e24\u4e2a\u7ed3\u679c\u94fe\u8868\uff0c\u5206\u522b\u5b58\u50a8\uff0c\u6ce8\u610f\u91cd\u590d\u7684\u94fe\u8868\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u8981\u5148\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u624d\u80fd\u8f93\u51fa</p>"},{"location":"solutions/pat/deduplication-on-a-linked-list/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MaxN = 1e6 + 10;\nconst int MaxK = 1e4 + 10;\nstruct node {\n    int data{};\n    int next{};\n} l[MaxN];\nint status[MaxK]{0};\n\nint main()\n{\n    int         N, first;\n    vector&lt;int&gt; res1, res2;\n    cin &gt;&gt; first &gt;&gt; N;\n    int address;\n    for (int i = 0; i &lt; N; ++i) {\n        cin &gt;&gt; address &gt;&gt; l[address].data &gt;&gt; l[address].next;\n    }\n    while (first != -1) {\n        if (status[abs(l[first].data)] == 0) {\n            res1.emplace_back(first);\n            status[abs(l[first].data)] = 1; // \u6807\u8bb0\u6b64\u6570\u7684\u7edd\u5bf9\u503c\u5df2\u7ecf\u51fa\u73b0\n        } else\n            res2.emplace_back(first);\n        first = l[first].next;\n    }\n    for (int i = 0; i != res1.size() - 1; ++i)\n        cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res1[i] &lt;&lt; \" \" &lt;&lt; l[res1[i]].data &lt;&lt; \" \" &lt;&lt; setw(5) &lt;&lt; setfill('0')\n             &lt;&lt; res1[i + 1] &lt;&lt; \"\\n\";\n    cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res1[res1.size() - 1] &lt;&lt; \" \" &lt;&lt; l[res1[res1.size() - 1]].data &lt;&lt; \" \" &lt;&lt; -1\n         &lt;&lt; \"\\n\";\n    if (!res2.empty()) {\n        for (int i = 0; i != res2.size() - 1; ++i)\n            cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res2[i] &lt;&lt; \" \" &lt;&lt; l[res2[i]].data &lt;&lt; \" \" &lt;&lt; setw(5) &lt;&lt; setfill('0')\n                 &lt;&lt; res2[i + 1] &lt;&lt; \"\\n\";\n        cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res2[res2.size() - 1] &lt;&lt; \" \" &lt;&lt; l[res2[res2.size() - 1]].data &lt;&lt; \" \" &lt;&lt; -1;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/digital-library/","title":"Digital Library","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1022 Digital Library (30 point(s))</p>"},{"location":"solutions/pat/digital-library/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u4e66\u7684\u4fe1\u606f\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u90e8\u5206\u4fe1\u606f\u67e5\u51fa\u6765\u4e66\u7684<code>id</code>\uff0c\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u4e00\u672c\u4e66\u53ef\u80fd\u4e0e\u591a\u4e2a\u4f5c\u8005\u3001\u51fa\u7248\u793e\u7b49\u5bf9\u5e94\u3002</p>"},{"location":"solutions/pat/digital-library/#_2","title":"\u601d\u8def","text":"<p>\u4f7f\u7528<code>map&lt;string, set&lt;int&gt;&gt;</code>\u8fd9\u79cd\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u5c06\u4e00\u4e2a<code>string</code>\u5982\u4f5c\u8005\uff0c\u8ddf\u591a\u4e2a\u4e66\u7684<code>id</code>\u5bf9\u5e94\u3002</p> <p>\u8fd9\u91cc\u53c8\u5b66\u5230\u4e86\u901a\u8fc7<code>cout</code>\u63a7\u5236\u8f93\u51fa\u7684\u4f4d\u6570\uff1a</p> <pre><code>#include &lt;iomanip&gt;\ncout &lt;&lt; setw(n) &lt;&lt; setfill(c); // \u901a\u8fc7\u8bbe\u7f6en\u4e2a\u4f4d\uff0c\u4e0d\u8db3\u7684\u7528c\u586b\u5145\n</code></pre> <p>\u4ee5\u53ca<code>cin.peek()</code>\u5224\u65ad\u662f\u5426\u8bfb\u5230\u4e86\u884c\u672b\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u8f93\u51fa\u6d41\u4e2d\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\uff0c\u6307\u9488\u4e0d\u540e\u79fb\u52a8\uff0c\u800c<code>cin.get()</code>\u8bfb\u5165\u5f53\u524d\u7684\u5b57\u7b26\u5e76\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u4e2a</p> <pre><code>if (cin.peek() == '\\n') { // \u5224\u65ad\u662f\u884c\u672b\n    cin.get(); // \u8bfb\u53d6\u51fa\u6362\u884c\u7b26\n    break; // \u8fdb\u4e00\u6b65\u64cd\u4f5c\uff0c\u6bd4\u5982\u9000\u51fa\u73b0\u5728\u7684\u5faa\u73af\uff08\u5982\u679c\u5728\u5faa\u73af\u5185\u7684\u8bdd\uff09\n}\n</code></pre>"},{"location":"solutions/pat/digital-library/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nvoid print(map&lt;string, set&lt;int&gt;&gt;&amp; mapSet, string&amp; query)\n{\n    if (mapSet.find(query) == mapSet.end())\n        cout &lt;&lt; \"Not Found\\n\";\n    else {\n        for (auto&amp; set : mapSet[query])\n            cout &lt;&lt; setw(7) &lt;&lt; setfill('0') &lt;&lt; set &lt;&lt; \"\\n\"; // \u63a7\u5236\u8f93\u51fa\u4f4d\u6570\uff0c\u4ee50\u586b\u5145\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    map&lt;string, set&lt;int&gt;&gt; mapTitle, mapAuthor, mapKey, mapPublisher, mapYear;\n    int                   n, m, id;\n    string                title, author, key, publisher, year;\n    cin &gt;&gt; n;\n    while (n--) {\n        cin &gt;&gt; id;\n        cin.get();\n        getline(cin, title);\n        mapTitle[title].insert(id);\n        getline(cin, author);\n        mapAuthor[author].insert(id);\n        while (cin &gt;&gt; key) {\n            mapKey[key].insert(id);\n            if (cin.peek() == '\\n') { // \u53c8\u5b66\u5230\u4e00\u62db\uff0ccin.peek()\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u7b26\uff0c\u53ef\u4ee5\u68c0\u6d4b\u662f\u5426\u8bfb\u5230\u4e86\u884c\u672b\n                cin.get();\n                break;\n            }\n        }\n        getline(cin, publisher);\n        mapPublisher[publisher].insert(id);\n        getline(cin, year);\n        mapYear[year].insert(id);\n    }\n    cin &gt;&gt; m;\n    int    type;\n    string query;\n    while (m--) {\n        cin &gt;&gt; type;\n        cin.get();\n        cin.get();\n        getline(cin, query);\n        cout &lt;&lt; type &lt;&lt; \": \" &lt;&lt; query &lt;&lt; endl;\n        switch (type) {\n            case 1:\n                print(mapTitle, query);\n                break;\n            case 2:\n                print(mapAuthor, query);\n                break;\n            case 3:\n                print(mapKey, query);\n                break;\n            case 4:\n                print(mapPublisher, query);\n                break;\n            case 5:\n                print(mapYear, query);\n                break;\n            default:\n                break;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/general-palindromic-number/","title":"General Palindromic Number","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1019 General Palindromic Number (20 point(s))</p>"},{"location":"solutions/pat/general-palindromic-number/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>D\u8fdb\u5236\u95ee\u9898+\u5224\u65ad\u56de\u6587\u6570</p>"},{"location":"solutions/pat/general-palindromic-number/#_2","title":"\u601d\u8def","text":"<p>\u5f88\u5e38\u89c4\uff0c\u53ea\u662f\u4e24\u4e2a\u95ee\u9898\u7ed3\u5408\u5728\u4e00\u8d77\u800c\u5df2</p>"},{"location":"solutions/pat/general-palindromic-number/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    int n, b;\n    cin &gt;&gt; n &gt;&gt; b;\n    vector&lt;int&gt; ans;\n    do {\n        ans.push_back(n % b);\n        n /= b;\n    } while (n != 0);\n    bool flag = true;\n    for (auto i = 0; i != ans.size() / 2; ++i) {\n        if (ans[i] != ans[ans.size() - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n    flag ? (cout &lt;&lt; \"Yes\\n\") : (cout &lt;&lt; \"No\\n\");\n    for (auto i = ans.size() - 1; i != -1; --i) {\n        cout &lt;&lt; ans[i];\n        if (i)\n            cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/group-photo/","title":"Group Photo","text":"<p>\u9898\u76ee\u94fe\u63a51109 Group Photo (25 \u5206)</p>"},{"location":"solutions/pat/group-photo/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u4eba\u6570\uff0c\u6392\u6570\uff0c\u7ed9\u8fd9\u4e9b\u4eba\u6309\u8eab\u9ad8\u6392\u961f\uff0c\u540e\u4e00\u6392\u4eba\u8eab\u9ad8\u4e0d\u4f4e\u4e8e\u524d\u4e00\u6392\uff0c\u6bcf\u4e00\u6392\u8eab\u9ad8\uff0c\u8eab\u9ad8\u76f8\u540c\u5219\u6309\u540d\u5b57\u6392\u5e8f\u6309\u7167\u4e2d\u95f4\u6700\u9ad8\uff0c\u7136\u540e\u53f3\u8fb9\uff0c\u518d\u5de6\u8fb9\u8fd9\u6837\u5b50\uff0c\u770b\u82f1\u6587\u63cf\u8ff0\uff0c\u5f88\u5bb9\u6613\u61c2\u3002</p>"},{"location":"solutions/pat/group-photo/#_2","title":"\u601d\u8def","text":"<p>\u5148\u7ed9\u8fd9\u4e9b\u4eba\u6392\u5e8f\uff0c\u8eab\u9ad8\u4ece\u9ad8\u5230\u4f4e\uff0c\u540d\u5b57\u4ece\u5c0f\u5230\u5927\uff0c\u7136\u540e\u6309\u6bcf\u4e00\u6392\u5212\u5206\u7ec4\uff0c\u8fdb\u884c\u6392\u961f\u3002</p>"},{"location":"solutions/pat/group-photo/#_3","title":"\u95ee\u9898","text":"<p>\u6ce8\u610f\u6700\u540e\u4e00\u6392\u4eba\u6570\uff0c\u6309\u7167N - N / K * (N / K - 1)\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u5982\u215a\u4f1a\u5f53\u62100\uff0c\u6240\u4ee5\u8981\u7528\u6c42\u4f59\u8fd0\u7b97\u66f4\u4f73\u3002</p>"},{"location":"solutions/pat/group-photo/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct Student {\n    int    height;\n    string name;\n};\nbool cmp(Student s1, Student s2)\n{\n    if (s1.height == s2.height)\n        return s1.name &lt; s2.name;\n    return s1.height &gt; s2.height;\n}\n\nint main()\n{\n    int K, N;\n    cin &gt;&gt; K &gt;&gt; N;\n    vector&lt;Student&gt; stu(K);\n    //    for (int i = 0; i &lt; K; ++i)\n    //    {\n    //        int height; string name;\n    //        cin &gt;&gt; name &gt;&gt; height;\n    //        stu.push_back(Student{height, name});\n    //    }\n    for (auto it = stu.begin(); it != stu.end(); ++it)\n        cin &gt;&gt; it-&gt;name &gt;&gt; it-&gt;height;\n    sort(stu.begin(), stu.end(), cmp);\n\n    vector&lt;vector&lt;string&gt;&gt; rows(N);\n    for (int i = 1; i &lt; N; ++i)\n        rows[i].resize(K / N);\n    rows[0].resize(K / N + K % N); // \u53d6\u4f59 note\uff01\uff01\uff01\n\n    int num = 0;\n    for (int i = 0; i &lt; rows.size(); ++i) {\n        int p = num, m = rows[i].size();\n        num += m;\n        int  start     = m / 2;\n        bool direction = true;\n        rows[i][start] = stu[p].name;\n        for (int j = 1; (p + j) &lt; num; ++j) {\n            if (direction) {\n                start -= j;\n                direction = false;\n            } else {\n                start += j;\n                direction = true;\n            }\n            rows[i][start] = stu[p + j].name;\n        }\n    }\n\n    for (int i = 0; i &lt; rows.size(); ++i) {\n        for (int j = 0; j &lt; rows[i].size(); ++j) {\n            cout &lt;&lt; rows[i][j];\n            if (j != rows[i].size() - 1)\n                cout &lt;&lt; \" \";\n        }\n        if (i != rows.size() - 1)\n            cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/hello-world-for-u/","title":"Hello World for U","text":"<p>\u9898\u76ee\u94fe\u63a51031 Hello World for U (20 \u5206)</p>"},{"location":"solutions/pat/hello-world-for-u/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5c06\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u6309\u7167U \u578b\u8f93\u51fa</p>"},{"location":"solutions/pat/hello-world-for-u/#_2","title":"\u601d\u8def","text":"<p>\u8ba1\u7b97\u51fa<code>n1</code>\u3001<code>n2</code>\u3001<code>n3</code>\uff0c\u7136\u540e\u6309\u884c\u8f93\u51fa\u5373\u53ef\u3002\u7531<code>n1 = n3</code>\u4e14\u4e0d\u5927\u4e8e<code>n2</code>\u5219\u6709<code>n1 = n3  = (n + 2) / 3</code>\u7684\u4e0b\u6574\u3002</p>"},{"location":"solutions/pat/hello-world-for-u/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    string str;\n    cin &gt;&gt; str;\n    int len = int(str.length());\n    int n1 = (len + 2) / 3, n3 = n1, n2 = len + 2 - n1 - n3;\n    for (int i = 0; i &lt; n1 - 1; ++i) { // n1 - 1 rows\n        cout &lt;&lt; str[i];\n        for (int j = 0; j &lt; n2 - 2; ++j)\n            cout &lt;&lt; \" \";\n        cout &lt;&lt; str[len - i - 1] &lt;&lt; endl;\n    }\n    for (int i = 0; i &lt; n2; ++i)\n        cout &lt;&lt; str[n1 + i - 1];\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/integer-factorization/","title":"Integer Factorization","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1103 Integer Factorization (30 point(s))</p>"},{"location":"solutions/pat/integer-factorization/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5c06\u7ed9\u5b9a\u7684\u6570\u62c6\u6210\uff0c\u6307\u5b9a\u4e2a\u6570\u7684P\u6b21\u65b9\u7684\u548c\uff0c\u8f93\u51fa\u8fd9\u4e9b\u6570\u4e2d\u603b\u548c\u6700\u5927\u7684\u90a3\u4e00\u7ec4</p>"},{"location":"solutions/pat/integer-factorization/#_2","title":"\u601d\u8def","text":"<p>\u5b66\u4e60\u4e86\u300a\u7b97\u6cd5\u7b14\u8bb0\u300b\uff0c\u63d0\u524d\u5c06\u7528\u5230\u7684\u8fd9\u5199\u6307\u5b9a\u7684\u6570\u521d\u59cb\u5316\uff0c\u540e\u9762\u76f4\u63a5\u5c31\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u5c31\u597d\u4e86</p> <p>\u4e3b\u8981\u662f<code>DFS</code>\u7684\u95ee\u9898\uff0c\u501f\u52a9\u5168\u5c40\u53d8\u91cf\u4f1a\u5f88\u65b9\u4fbf</p>"},{"location":"solutions/pat/integer-factorization/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;cmath&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint         N, K, P, maxFacSum = -1; // \u6700\u5927\u5e95\u6570\u548c\nvector&lt;int&gt; fac, ans, temp;          // fac\u5b58\u653e\u4e0d\u5927\u4e8eN\u7684i^p\u7684\u6570, ans\u4e3a\u7ed3\u679c\uff0ctemp\u4e3a\u4e2d\u95f4\u91cf\n\nvoid init()\n{\n    int    t = 0;\n    double i = 0;\n    while (t &lt;= N) {\n        fac.emplace_back(t);\n        t = int(pow(++i, P));\n    }\n}\n/**\n * @param index \u5f53\u524d\u5c1d\u8bd5\u7684\u5143\u7d20\u4e0b\u6807\n * @param cur_k \u5f53\u524d\u9009\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\n * @param sum \u5f53\u524d\u9009\u4e2d\u7684\u6570\u7684\u548c\n * @param fac_sum \u5f53\u524d\u9009\u4e2d\u7684\u5e95\u6570\u548c\n */\nvoid DFS(int index, int cur_k, int sum, int fac_sum)\n{\n    if (sum == N &amp;&amp; cur_k == K) {  // \u627e\u5230\u91cf\u4e00\u4e2a\u7b26\u5408\u7684\u5e8f\u5217\n        if (fac_sum &gt; maxFacSum) { // \u9009\u62e9\u5e95\u6570\u548c\u66f4\u5927\u7684\n            ans       = temp;\n            maxFacSum = fac_sum;\n        }\n        return;\n    }\n    if (sum &gt; N || cur_k &gt; K)\n        return;\n    // \u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u524d\u63d0\uff1asum\u5f53\u524d\u548c\u672a\u8d85\u51faN\u4e14\u5f53\u524d\u9009\u62e9\u7684\u4e2a\u6570cur_k\u4e5f\u672a\u8d85\u51faK\n    if (index &gt;= 1) { // fac[0] = 0, \u4e0d\u5728\u9009\u62e9\u8303\u56f4\u5185\n        temp.emplace_back(index);\n        // \u9009\u62e9\u5f53\u524dindex\n        DFS(index, cur_k + 1, sum + fac[index], fac_sum + index);\n        temp.pop_back();\n        // \u4e0d\u9009\u5f53\u524dindex\n        DFS(index - 1, cur_k, sum, fac_sum);\n    }\n}\n\nint main()\n{\n    cin &gt;&gt; N &gt;&gt; K &gt;&gt; P;\n    init();\n    DFS(fac.size() - 1, 0, 0, 0);\n    if (maxFacSum == -1)\n        cout &lt;&lt; \"Impossible\\n\";\n    else {\n        cout &lt;&lt; N &lt;&lt; \" = \" &lt;&lt; ans[0] &lt;&lt; \"^\" &lt;&lt; P;\n        for (auto it = ans.begin() + 1; it != ans.end(); ++it)\n            cout &lt;&lt; \" + \" &lt;&lt; *it &lt;&lt; \"^\" &lt;&lt; P;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/invert-a-binary-tree/","title":"Invert a Binary Tree","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1102 Invert a Binary Tree (25 point(s))</p>"},{"location":"solutions/pat/invert-a-binary-tree/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u51fa\u4e8c\u53c9\u6811\u8282\u70b9\u4e2a\u6570\uff0c\u4ee5\u53ca\u5404\u4e2a\u8282\u70b9\u7684\u5b69\u5b50\u4fe1\u606f\uff0c\u8981\u6c42\u8f93\u51fa\u53cd\u8f6c\u540e\u7684\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c</p>"},{"location":"solutions/pat/invert-a-binary-tree/#_2","title":"\u601d\u8def","text":"<p>\u5173\u952e\u5728\u4e8e\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u6211\u8fd8\u662f\u4e60\u60ef\u4e8e\u7528\u52a8\u6001\u5f62\u5f0f\u7684\u6811\uff0c\u6240\u4ee5\u8be6\u7ec6\u770b\u4ee3\u7801\u5427\uff0c\u5f88\u5e38\u89c4</p>"},{"location":"solutions/pat/invert-a-binary-tree/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n    int          data{};\n    struct node* left{nullptr};\n    struct node* right{nullptr};\n    struct node* parent{nullptr}; // \u53d7\u9093\u516c\u7684\u6559\u8bf2\uff0c\u73b0\u5728\u6211\u662f\u771f\u611f\u89c9\u591a\u7528\u4e00\u4e2a\u7236\u8282\u70b9\u662f\u591a\u4e48\u7684\u660e\u4e86\n};\nint            n;\nvector&lt;int&gt;    in;    // NOLINT\nvector&lt;int&gt;    layer; // NOLINT\nvector&lt;string&gt; str;\n\nnode* construct()\n{\n    node** p = new node*[n];      // \u5b58\u50a8\u6240\u6709\u7684\u6307\u5411\u8282\u70b9\u7684\u6307\u9488\n    for (int i = 0; i &lt; n; ++i) { // \u6ce8\u610f\u4e8c\u7ef4\u6570\u7ec4\u5efa\u7acb\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u884c\u90fd\u8981\u5728\u7533\u8bf7\u4e00\u4e0b\u7a7a\u95f4\n        p[i]       = new node;    // \u7ed9\u6bcf\u4e00\u884c\u5f00\u8f9f\u4e00\u4e2a\u8282\u70b9\n        p[i]-&gt;data = i;\n    }\n    for (int i = 0; i &lt; n; ++i) {\n        if (str[i][0] != '-') { // \u7ed9\u51fa\u4e86\u5b69\u5b50\u4fe1\u606f\uff0c\u4e5f\u5c31\u7ed9\u51fa\u4e86\u7236\u4eb2\u4fe1\u606f\n            p[i]-&gt;left                 = p[str[i][0] - '0'];\n            p[str[i][0] - '0']-&gt;parent = p[i];\n        }\n        if (str[i][2] != '-') {\n            p[i]-&gt;right                = p[str[i][2] - '0'];\n            p[str[i][2] - '0']-&gt;parent = p[i];\n        }\n    }\n    node* root;\n    for (int i = 0; i &lt; n; ++i) { // \u627e\u51fa\u6839\u8282\u70b9\n        if (p[i]-&gt;parent == nullptr) {\n            root = p[i];\n            break;\n        }\n    }\n    queue&lt;node*&gt; q;\n    q.push(root);\n    while (!q.empty()) {\n        node* temp = q.front();\n        q.pop();\n        if (temp-&gt;left)\n            q.push(temp-&gt;left);\n        if (temp-&gt;right)\n            q.push(temp-&gt;right);\n        swap(temp-&gt;left, temp-&gt;right); // \u7ffb\u8f6c\u6811\uff0c\u5373\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4ea4\u6362\n    }\n    return root;\n}\n\nvoid in_traverse(node*&amp; tree)\n{ // \u5e38\u89c4\n    if (!tree)\n        return;\n    in_traverse(tree-&gt;left);\n    in.emplace_back(tree-&gt;data);\n    in_traverse(tree-&gt;right);\n}\n\nvoid layer_traverse(node*&amp; tree)\n{ // \u5e38\u89c4\n    queue&lt;node*&gt; q;\n    q.push(tree);\n    while (!q.empty()) {\n        node* temp = q.front();\n        q.pop();\n        if (temp-&gt;left)\n            q.push(temp-&gt;left);\n        if (temp-&gt;right)\n            q.push(temp-&gt;right);\n        layer.emplace_back(temp-&gt;data);\n    }\n}\n\nint main()\n{\n    cin &gt;&gt; n;\n    cin.get();\n    str.resize(n);\n    for (int i = 0; i &lt; n; ++i)\n        getline(cin, str[i]);\n    node* tree = construct();\n    in_traverse(tree);\n    layer_traverse(tree);\n    for (auto&amp; it : layer) {\n        cout &lt;&lt; it;\n        if (&amp;it != &amp;layer.back())\n            cout &lt;&lt; \" \";\n        else\n            cout &lt;&lt; \"\\n\";\n    }\n    for (auto&amp; it : in) {\n        cout &lt;&lt; it;\n        if (&amp;it != &amp;in.back())\n            cout &lt;&lt; \" \";\n        else\n            cout &lt;&lt; \"\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/kuchiguse/","title":"Kuchiguse","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1077 Kuchiguse (20 point(s))</p>"},{"location":"solutions/pat/kuchiguse/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8f93\u51fa\u6700\u957f\u516c\u5171\u540e\u7f00</p>"},{"location":"solutions/pat/kuchiguse/#_2","title":"\u601d\u8def","text":"<p>\u5229\u7528<code>algorithm</code>\u4e2d\u7684<code>reverse</code>\u51fd\u6570\uff0c\u53d8\u4e3a\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u4e2d\u95f4\u5b66\u4e60\u4e86\u4e00\u4e0b<code>lambda</code>\u8868\u8fbe\u5f0f</p>"},{"location":"solutions/pat/kuchiguse/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nbool fit(vector&lt;string&gt; spoken, int k)\n{\n    bool flag = true;\n    for (auto it = spoken.begin(); it != spoken.end() - 1; ++it) {\n        string a = *it, b = *(it + 1);\n        if (a[k] != b[k]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    cin.get();\n    vector&lt;string&gt; spoken(n);\n    int            min = 257;\n    for (auto&amp; s : spoken) { // \u8bfb\u5165\u3001\u7ffb\u8f6c\u53d8\u4e3a\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u8ba1\u7b97\u6700\u77ed\u7684\u957f\u5ea6\n        getline(cin, s);\n        reverse(s.begin(), s.end());\n        if (min &lt; s.length())\n            min = s.length();\n    }\n    int k;\n    for (k = -1; k &lt; min;) {\n        if (fit(spoken, k + 1))\n            ++k;\n        else\n            break;\n    }\n    // \u5b66\u4e60\u4f7f\u7528lambda\u8868\u8fbe\u5f0f\n    k &lt; 0 ? cout &lt;&lt; \"nai\" : cout &lt;&lt; [k](const string&amp; str) -&gt; string {\n        string ans = str.substr(0, k + 1);\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }(spoken[0]);\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/linked-list-sorting/","title":"Linked List Sorting","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1052 Linked List Sorting (25 point(s))</p>"},{"location":"solutions/pat/linked-list-sorting/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u7ed9\u5b9a\u94fe\u8868\u6392\u5e8f</p>"},{"location":"solutions/pat/linked-list-sorting/#_2","title":"\u601d\u8def","text":"<p>\u8c03\u7528<code>sort</code>\u51fd\u6570\uff0c\u6ce8\u610f\uff0c\u9898\u76ee\u4e2d\u7ed9\u7684\u8282\u70b9\u4e0d\u4e00\u5b9a\u90fd\u5728\u94fe\u8868\u4e0a\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4f1a\u7ec4\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u9700\u8981\u7279\u6b8a\u5224\u65ad</p>"},{"location":"solutions/pat/linked-list-sorting/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MaxN = 1e6 + 10;\nstruct node {\n    int data{};\n    int next{};\n} l[MaxN];\n\nbool cmp(int a, int b)\n{\n    return l[a].data &lt; l[b].data;\n}\n\nint main()\n{\n    int         N, first;\n    vector&lt;int&gt; res;\n    cin &gt;&gt; N &gt;&gt; first;\n    int address;\n    for (int i = 0; i &lt; N; ++i) {\n        cin &gt;&gt; address &gt;&gt; l[address].data &gt;&gt; l[address].next;\n    }\n    while (first != -1) {\n        res.emplace_back(first);\n        first = l[first].next;\n    }\n    if (res.empty()) { // \u6709\u6548\u8282\u70b9\u4e3a0\n        cout &lt;&lt; 0 &lt;&lt; \" \" &lt;&lt; -1;\n        return 0;\n    }\n    sort(res.begin(), res.end(), cmp);\n    cout &lt;&lt; res.size() &lt;&lt; \" \" &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res[0] &lt;&lt; \"\\n\";\n    for (int i = 0; i &lt; res.size() - 1; ++i)\n        cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res[i] &lt;&lt; \" \" &lt;&lt; l[res[i]].data &lt;&lt; \" \" &lt;&lt; setw(5) &lt;&lt; setfill('0')\n             &lt;&lt; res[i + 1] &lt;&lt; \"\\n\";\n\n    cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res[res.size() - 1] &lt;&lt; \" \" &lt;&lt; l[res[res.size() - 1]].data &lt;&lt; \" \" &lt;&lt; -1;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/mars-numbers/","title":"Mars Numbers","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1100 Mars Numbers (20 point(s))</p>"},{"location":"solutions/pat/mars-numbers/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u89c4\u5219\u7684\u8fdb\u5236\u8f6c\u6362</p>"},{"location":"solutions/pat/mars-numbers/#_2","title":"\u601d\u8def","text":"<p>\u8d77\u521d\u6211\u662f\u6253\u7b97\u8f93\u5165\u4e00\u4e2a\u5904\u7406\u4e00\u4e2a\u7684\uff0c\u4f46\u4e0b\u624b\u4e4b\u524d\u770b\u5230\u4e86\u300a\u7b97\u6cd5\u7b14\u8bb0\u300b\u4e2d\u7684\u601d\u8def\uff0c\u76f4\u63a5\u7528<code>map</code>\u505a\uff08\u56e0\u4e3a\u6570\u636e\u91cf\u4e5f\u4e0d\u5927\uff09\u5b8c\u5168\u53ef\u4ee5\u9884\u5904\u7406\uff0c\u7136\u540e\u540e\u9762\u76f4\u63a5\u67e5\u8be2</p>"},{"location":"solutions/pat/mars-numbers/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst vector&lt;string&gt; unit = {\"tret\", \"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\",\n                             \"jly\",  \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"}; // NOLINT\nconst vector&lt;string&gt; ten  = {\"tret\", \"tam\", \"hel\", \"maa\", \"huh\", \"tou\", \"kes\",\n                             \"hei\",  \"elo\", \"syy\", \"lok\", \"mer\", \"jou\"}; // NOLINT\n\nint main()\n{\n    map&lt;string, int&gt; str2num;\n    map&lt;int, string&gt; num2str;\n    for (int i = 0; i &lt; 13; ++i) {\n        num2str[i]       = unit[i]; // \u4e2a\u4f4d\u4e3a[0, 12]\uff0c\u5341\u4f4d\u4e3a0\n        str2num[unit[i]] = i;\n        num2str[i * 13]  = ten[i]; // \u5341\u4f4d\u4e3a[0, 12], \u4e2a\u4f4d\u4e3a9\n        str2num[ten[i]]  = i * 13;\n    }\n    for (int i = 1; i &lt; 13; ++i) {\n        for (int j = 1; j &lt; 13; ++j) {\n            string str          = ten[i] + \" \" + unit[j];\n            num2str[i * 13 + j] = str;\n            str2num[str]        = i * 13 + j;\n        }\n    }\n    int n;\n    cin &gt;&gt; n;\n    cin.get();\n    while (n--) {\n        string str;\n        getline(cin, str);\n        if (str[0] &gt;= '0' &amp;&amp; str[0] &lt;= '9') { // \u662f\u6570\u5b57\n            int num = stoi(str);\n            cout &lt;&lt; num2str[num] &lt;&lt; endl;\n        } else {\n            cout &lt;&lt; str2num[str] &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/mice-and-rice/","title":"Mice and Rice","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1056 Mice and Rice (25 point(s))</p>"},{"location":"solutions/pat/mice-and-rice/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u664b\u7ea7\u5f0f\u6bd4\u8d5b\uff0c\u7ed9\u51fa\u6bcf\u4e2a\u9009\u624b\uff08\u8001\u9f20\uff09\u6700\u7ec8\u7684\u6392\u540d\u3002</p>"},{"location":"solutions/pat/mice-and-rice/#_2","title":"\u601d\u8def","text":"<p>\u6ce8\u610f\u26a0\ufe0f\uff1a\u9898\u76ee\u4e2d\u7ed9\u7684\u987a\u5e8f\u662f\u53c2\u8d5b\u987a\u5e8f\u7684\u9009\u624b\u4e0b\u6807\uff0c\u800c\u4e0d\u662f\u9009\u624b\u7684\u53c2\u8d5b\u987a\u5e8f\uff0c\uff0c\uff0c</p> <p>\u53c2\u8003\u300a\u7b97\u6cd5\u7b14\u8bb0\u300b\u505a\u7684\u65f6\u5019\u8111\u5b50\u5f88\u6df7\u4e71\uff0c\u4e0d\u6e05\u6670</p> <p>\u5173\u952e\u5728\u4e8e\u627e\u5230\uff0c\u7ec4\u6570\u4e0e\u6700\u7ec8\u6392\u540d\u7684\u5173\u7cfb\uff0c\u5982\u9898\u76ee\u4e2d\u7ed9\u768411\u4e2a\u8001\u9f20\uff0c\u7b2c\u4e00\u8f6e\u67094\u7ec4\uff0c\u5219\u5728\u7b2c\u4e00\u8f6e\u4e2d\u6dd8\u6c70\u4e0b\u6765\u7684\u8001\u9f20\u7684\u6392\u540d\u5c31\u662f5\uff084+1\uff09\uff0c\u7b2c\u4e8c\u8f6e\u67094\u4e2a\u8001\u9f20\u53c2\u8d5b\uff0c\u7ec4\u6570\u662f2\uff0c\u5219\u6dd8\u6c70\u4e0b\u6765\u7684\u989d\u6392\u540d\u5c31\u662f3\uff082+1\uff09\uff0c\u7b2c\u4e09\u8f6e\u67092\u4e24\u4e2a\u8001\u9f20\u53c2\u8d5b\uff0c\u5219\u6dd8\u6c70\u4e0b\u6765\u7684\u5c31\u662f\u6392\u540d\u4e3a2\u3002</p>"},{"location":"solutions/pat/mice-and-rice/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\nusing namespace std;\n\nint main()\n{\n    int p, g;\n    cin &gt;&gt; p &gt;&gt; g;\n    pair&lt;int, int&gt; mice[p];\n    for (int i = 0; i &lt; p; ++i)\n        cin &gt;&gt; mice[i].first;\n    queue&lt;int&gt; q;\n    for (int i = 0; i &lt; p; ++i) {\n        int x;\n        cin &gt;&gt; x;\n        q.push(x);\n    }\n    int temp = p, group; // \u5f53\u524d\u53c2\u52a0\u7684\u8001\u9f20\u6570\u548c\u7ec4\u6570\n    while (q.size() != 1) {\n        if (temp % g == 0)\n            group = temp / g;\n        else\n            group = temp / g + 1;\n        for (int i = 0; i &lt; group; ++i) {\n            int max = q.front();\n            for (int j = 0; j &lt; g; ++j) {\n                if (i * g + j &gt;= temp)\n                    break;\n                int front = q.front();\n                if (mice[front].first &gt; mice[max].first)\n                    max = front;\n                mice[front].second = group + 1;\n                q.pop();\n            }\n            q.push(max);\n        }\n        temp = group;\n    }\n    mice[q.front()].second = 1;\n    for (int i = 0; i &lt; p; ++i) {\n        cout &lt;&lt; mice[i].second;\n        if (i &lt; p - 1)\n            cout &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/password/","title":"Password","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1035 Password (20 point(s))</p>"},{"location":"solutions/pat/password/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u6309\u7167\u89c4\u5219\uff1a<code>1-&gt;@, 0-&gt;%, l-&gt;L, O-&gt;o</code>\u4fee\u6539\u5bc6\u7801</p>"},{"location":"solutions/pat/password/#_2","title":"\u601d\u8def","text":"<p>\u8bbe\u7f6e\u6807\u5fd7\uff0c\u8868\u793a\u662f\u5426\u6709\u4fee\u6539\uff0c\u4fee\u6539\u540e\u7684\u5b58\u50a8\u5728\u53e6\u4e00\u4e2a<code>vector</code>\u4e2d</p>"},{"location":"solutions/pat/password/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct User {\n    string name;\n    string passwd;\n    User(string s1, string s2) : name(s1), passwd(s2) {}\n};\n\nbool scan(User&amp; user)\n{\n    bool modified = false;\n    for (auto&amp; s : user.passwd) {\n        switch (s) {\n            case 'l':\n                s        = 'L';\n                modified = true;\n                break;\n            case '0':\n                s        = '%';\n                modified = true;\n                break;\n            case '1':\n                s        = '@';\n                modified = true;\n                break;\n            case 'O':\n                s        = 'o';\n                modified = true;\n                break;\n            default:\n                break;\n        }\n    }\n    return modified;\n}\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;User&gt; users;\n    while (n--) {\n        string t_name, t_passwd;\n        cin &gt;&gt; t_name &gt;&gt; t_passwd;\n        users.emplace_back(t_name, t_passwd);\n    }\n    vector&lt;User&gt; ans;\n    for (auto&amp; user : users) {\n        if (scan(user)) {\n            ans.emplace_back(user);\n        }\n    }\n    if (ans.size() == 0) {\n        cout &lt;&lt; \"There \" &lt;&lt; (users.size() &gt; 1 ? \"are \" : \"is \") &lt;&lt; users.size() &lt;&lt; \" account\"\n             &lt;&lt; (users.size() &gt; 1 ? \"s \" : \" \") &lt;&lt; \"and no account is modified\";\n    } else {\n        cout &lt;&lt; ans.size() &lt;&lt; endl;\n        for (auto&amp; u : ans) {\n            cout &lt;&lt; u.name &lt;&lt; \" \" &lt;&lt; u.passwd;\n            if (&amp;u != &amp;ans.back())\n                cout &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/pop-sequence/","title":"Pop Sequence","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1051 Pop Sequence (25 point(s))</p>"},{"location":"solutions/pat/pop-sequence/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u68c0\u6d4b\u7ed9\u5b9a\u7684\u6808\u8f93\u51fa\u5e8f\u5217\u662f\u5426\u662f\u6b63\u786e\u7684\u6808\u8f93\u51fa\u5e8f\u5217</p>"},{"location":"solutions/pat/pop-sequence/#_2","title":"\u601d\u8def","text":"<p>\u6839\u636e\u8f93\u5165\u5e8f\u5217\uff0c\u6a21\u62df\u6808\u6df7\u6d17\uff0c\u6700\u7ec8\u8f85\u52a9\u6808\u7a7a\u5219\u662f\u6b63\u786e\u7684</p>"},{"location":"solutions/pat/pop-sequence/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    int M, N, K;\n    cin &gt;&gt; M &gt;&gt; N &gt;&gt; K;\n    while (K--) {\n        vector&lt;int&gt; pop;\n        for (int i = 0; i &lt; N; ++i) {\n            int x;\n            cin &gt;&gt; x;\n            pop.emplace_back(x);\n        }\n        stack&lt;int&gt; s;\n        bool       status = true; // \u5224\u65ad\u5728\u6a21\u62df\u8fc7\u7a0b\u4e2d\u662f\u5426\u8f85\u52a9\u6808\u7684\u5927\u5c0f\u8d85\u8fc7\u4e86M\n        int        j      = 0;\n        for (int i = 0; i &lt; N;) {\n            if (s.empty()) { // \u6808\u7a7a\u65f6\uff0c\u76f4\u63a5\u5165\n                s.push(++i);\n                continue;\n            }\n            if (s.top() != pop[j]) { // \u5f53\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e0d\u7b49\u4e8e\u8981\u8f93\u51fa\u7684\u5143\u7d20\u65f6\uff0c\u5165\u6808\n                if (s.size() == M) { // \u5982\u679c\u8d85\u8fc7\u4e86\u8bbe\u5b9a\u5927\u5c0fM\uff0c\u76f4\u63a5\u9000\u51fa\uff0c\u8f93\u51faNO\n                    status = false;\n                    break;\n                }\n                s.push(++i);\n            } else { // \u6b64\u65f6\u76f8\u7b49\uff0c\u5faa\u73af\u51fa\u6808\uff08\u6ee1\u8db3\uff0c\u6808\u9876=pop[j]\n                while (!s.empty() &amp;&amp; s.top() == pop[j]) {\n                    s.pop();\n                    ++j;\n                }\n            }\n        }\n        while (!s.empty() &amp;&amp; s.top() == pop[j]) { // \u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u503c\u4e3aN\u7684\u5143\u7d20\u5165\u6808\u540e\uff0c\u5728for\u5faa\u73af\u4e2d\u6ca1\u6709\u68c0\u67e5\uff0c\u6240\u4ee5\u5728\u6b64\u68c0\u67e5\n            s.pop();\n            ++j;\n        }\n        if (s.empty() &amp;&amp; status) // \u5982\u679c\u6ca1\u6709\u8d85\u8fc7M\u4e14\u6700\u7ec8\u6808\u7a7a\uff0c\u5219\u8f93\u51fayes\n            cout &lt;&lt; \"YES\";\n        else\n            cout &lt;&lt; \"NO\";\n        if (K)\n            cout &lt;&lt; \"\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/product-of-polynomials/","title":"Product of Polynomials","text":"<p>\u9898\u76ee\u94fe\u63a51009 Product of Polynomials (25 \u5206)</p>"},{"location":"solutions/pat/product-of-polynomials/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u591a\u9879\u5f0f\u4e58\u6cd5\u5b9e\u73b0\uff0c\u5e38\u89c4</p>"},{"location":"solutions/pat/product-of-polynomials/#_2","title":"\u601d\u8def","text":"<p>\u4e00\u4e2a\u5411\u91cf\u5b58\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u540e\u9762\u4e00\u4e2a\u591a\u9879\u5f0f\u8fb9\u8bfb\u8fb9\u8ba1\u7b97\u5373\u53ef</p>"},{"location":"solutions/pat/product-of-polynomials/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvoid calc(vector&lt;double&gt;&amp; res, const vector&lt;int&gt;&amp; index, const vector&lt;double&gt;&amp; value, const int a, const double b)\n{\n    for (auto it = index.begin(); it != index.end(); ++it)\n        res[a + *it] += b * value[it - index.begin()];\n}\n\nint main()\n{\n    int    k, a;\n    double b;\n\n    vector&lt;int&gt;    index;\n    vector&lt;double&gt; value, res(2001);\n\n    cin &gt;&gt; k;\n    for (auto i = 0; i &lt; k; ++i) {\n        cin &gt;&gt; a &gt;&gt; b;\n        index.push_back(a);\n        value.push_back(b);\n    }\n\n    cin &gt;&gt; k;\n    for (auto i = 0; i &lt; k; ++i) {\n        cin &gt;&gt; a &gt;&gt; b;\n        calc(res, index, value, a, b);\n    }\n\n    int count = 0;\n    for (auto&amp; p : res)\n        if (p != 0.0)\n            ++count;\n    cout &lt;&lt; count;\n    for (auto it = res.end() - 1; it &gt;= res.begin(); --it)\n        if (*it != 0.0)\n            cout &lt;&lt; \" \" &lt;&lt; it - res.begin() &lt;&lt; \" \" &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; *it;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/read-number-in-chinese/","title":"Read Number in Chinese","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1082 Read Number in Chinese (25 point(s))</p>"},{"location":"solutions/pat/read-number-in-chinese/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u4ee5\u4e2d\u6587\u7684\u4e60\u60ef\u8bfb\u51fa\u6570\u5b57\u3002</p>"},{"location":"solutions/pat/read-number-in-chinese/#_2","title":"\u601d\u8def","text":"<p>\u53c2\u8003\u4e86\u300a\u7b97\u6cd5\u7b14\u8bb0\u300b\u8fd9\u672c\u4e66\u3002</p> <p>\u7531\u4e8e\u4e2d\u6587\u4e2d\uff0c\u6709\u4ebf\u3001\u4e07\uff0c\u5728\u4e07\u4e2d\u53c8\u6709\u5343\u3001\u767e\u3001\u5341\uff0c\u6545\u6bcf\u56db\u4e2a\u4e00\u7ec4\u5904\u7406\u3002\u5176\u4e2d\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\u7a7a\u683c\u7684\u8f93\u51fa\uff0c\u5148\u8f93\u51fa\u7a7a\u683c\u5728\u8f93\u51fa\u5b57\u7b26\u4e32\u6bd4\u8f83\u597d\u3002</p>"},{"location":"solutions/pat/read-number-in-chinese/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst char nums[10][5] = {\"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"};\nconst char wei[5][5]   = {\"Shi\", \"Bai\", \"Qian\", \"Wan\", \"Yi\"};\nint        main()\n{\n    int n;\n    cin &gt;&gt; n;\n    string ans  = to_string(n);\n    int    left = 0, right = ans.length();\n    if (n &lt; 0) {\n        cout &lt;&lt; \"Fu\";\n        ++left;\n    }\n    // \u6211\u7684\u89c4\u8303\uff1a\u4e00\u7ec4\u7684\u4e0b\u6807\u8303\u56f4\u4e3a [left, right)\n    while (right - left &gt; 4)\n        right -= 4;\n    while (left &lt; ans.length()) {\n        bool flag  = false;    // \u8868\u793a\u4e00\u7ec4\u4e2d\u662f\u5426\u542b\u67090\n        bool group = false;    // \u8868\u793a\u8be5\u7ec4\u662f\u5426\u6709\u6570\n        while (left &lt; right) { // \u5904\u7406\u6bcf\u4e00\u7ec4\n            if (left &gt; 0 &amp;&amp; ans[left] == '0')\n                flag = true;\n            else {\n                if (flag) { // \u4e00\u7ec4\u4e2d\u5b58\u57280\uff0c \u8f93\u51fa0\u5373\u5904\u7406\u5b8c\u6bd5\n                    cout &lt;&lt; \" ling\";\n                    flag = false;\n                }\n                if (n &gt; 0 &amp;&amp; left != 0 '' n &lt; 0)\n                    cout &lt;&lt; \" \";\n                cout &lt;&lt; nums[ans[left] - '0'];\n                group = true; // \u8868\u793a\u8be5\u7ec4\u6709\u6570\n                if (left != right - 1) {\n                    cout &lt;&lt; \" \" &lt;&lt; wei[right - left - 2];\n                }\n            }\n            ++left;\n        }\n        if (group &amp;&amp; right != ans.length()) {\n            cout &lt;&lt; \" \" &lt;&lt; wei[(ans.length() - right) / 4 + 2];\n        }\n        right += 4;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/reversing-linked-list/","title":"Reversing Linked List","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1074 Reversing Linked List (25 point(s))</p>"},{"location":"solutions/pat/reversing-linked-list/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ffb\u8f6c\u94fe\u8868</p>"},{"location":"solutions/pat/reversing-linked-list/#_2","title":"\u601d\u8def","text":"<p>\u5229\u7528<code>reverse</code>\u51fd\u6570\u5373\u53ef\u3002\u6ce8\u610f\u559c\u6b22\u4f7f\u7528<code>cout</code>\u7684\uff0c\u5982\u4f55\u63a7\u5236\u8f93\u51fa\u683c\u5f0f\uff0c\u4ee5\u53ca\u7528<code>\"\\n\"</code>\u8f93\u51fa\u6362\u884c\u4f1a\u51cf\u5c11\u65f6\u95f4\u3002</p>"},{"location":"solutions/pat/reversing-linked-list/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MaxN = 1e6 + 10;\nstruct node {\n    int data{};\n    int next{};\n} l[MaxN];\n\nint main()\n{\n    int         first, N, K;\n    vector&lt;int&gt; res;\n    cin &gt;&gt; first &gt;&gt; N &gt;&gt; K;\n    int address;\n    for (int i = 0; i &lt; N; ++i) {\n        cin &gt;&gt; address &gt;&gt; l[address].data &gt;&gt; l[address].next;\n    }\n    while (first != -1) {\n        res.emplace_back(first);\n        first = l[first].next;\n    }\n    for (int i = 0; i + K &lt;= res.size(); i += K)\n        reverse(res.begin() + i, res.begin() + i + K);\n    for (int i = 0; i &lt; res.size() - 1; ++i)\n        cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res[i] &lt;&lt; \" \" &lt;&lt; l[res[i]].data &lt;&lt; \" \" &lt;&lt; setw(5) &lt;&lt; setfill('0')\n             &lt;&lt; res[i + 1] &lt;&lt; \"\\n\";\n\n    cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; res[res.size() - 1] &lt;&lt; \" \" &lt;&lt; l[res[res.size() - 1]].data &lt;&lt; \" \" &lt;&lt; -1;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/scientific-notation/","title":"Scientific Notation","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1073 Scientific Notation (20 point(s))</p>"},{"location":"solutions/pat/scientific-notation/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5c06\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u6570\u5b57\u8868\u793a\u6210\u6b63\u5e38\u7684\u5f62\u5f0f</p>"},{"location":"solutions/pat/scientific-notation/#_2","title":"\u601d\u8def","text":"<p>\u9650\u5b9a\u4e3a<code>E</code>\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6839\u636e\u6307\u6570\u6b63\u8d1f\u5206\u60c5\u51b5\uff0c\u603b\u7ed3\u89c4\u5f8b</p>"},{"location":"solutions/pat/scientific-notation/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    string str;\n    cin &gt;&gt; str;\n    if (str[0] == '-')\n        cout &lt;&lt; '-';\n    int pos = 0;\n    while (str[pos] != 'E')\n        ++pos;\n    int exp = 0; // \u8ba1\u7b97\u6307\u6570\n    for (int i = pos + 2; i &lt; str.length(); ++i) {\n        exp = exp * 10 + (str[i] - '0');\n    }\n    if (exp == 0) {\n        for (int i = 1; i &lt; pos; ++i)\n            cout &lt;&lt; str[i];\n    }\n    if (str[pos + 1] == '-') {\n        cout &lt;&lt; \"0.\";\n        for (int i = 0; i &lt; exp - 1; ++i)\n            cout &lt;&lt; 0;\n        cout &lt;&lt; str[1];\n        for (int i = 3; i &lt; pos; ++i)\n            cout &lt;&lt; str[i];\n    } else {\n        for (int i = 1; i &lt; pos; ++i) {\n            if (str[i] == '.')\n                continue;\n            cout &lt;&lt; str[i];\n            if (i == exp + 2 &amp;&amp; pos - 3 != exp) // 3\u4e3a\u539f\u5c0f\u6570\u70b9\u4f4d\u7f6e\n                cout &lt;&lt; \".\";\n        }\n        for (int i = 0; i &lt; exp - (pos - 3); ++i)\n            cout &lt;&lt; 0;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/set-similarity/","title":"Set Similarity","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1063 Set Similarity (25 point(s))</p>"},{"location":"solutions/pat/set-similarity/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u76f8\u4f3c\u5ea6\uff0c\u5373\u76f8\u540c\u6570\u5b57\u7684\u4e2a\u6570\u5360\u4e24\u4e2a\u96c6\u5408\u7684\u603b\u96c6\u5408\u7684\u6bd4\u4f8b</p>"},{"location":"solutions/pat/set-similarity/#_2","title":"\u601d\u8def","text":"<p>\u660e\u663e\u8981\u6c42\u53bb\u91cd\uff0c\u800c\u4e14\u540e\u9762\u8981\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u76f8\u540c\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u4e5f\u6697\u542b\u8981\u6392\u5e8f\uff08\u4e0d\u7136\u590d\u6742\u5ea6\u592a\u9ad8\uff09\uff0c\u6240\u4ee5\u9009\u7528<code>set</code>\u8fdb\u884c\u5b58\u50a8\uff0c\u5176\u4ed6\u5c31\u5f88\u5e38\u89c4\u3002</p> <p>\u518d\u6b21\u56de\u987e\u4e00\u4e0b\uff0c<code>cout</code>\u63a7\u5236\u8f93\u51fa\u7684\u683c\u5f0f\u8bed\u53e5</p> <pre><code>#include &lt;iomanip&gt; // \u5934\u6587\u4ef6\nusing namespace std;\n\ncout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(n); // n\u4e3a\u8981\u6c42\u7684\u7cbe\u5ea6\n</code></pre>"},{"location":"solutions/pat/set-similarity/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\n#include &lt;set&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint count(set&lt;int&gt; a, set&lt;int&gt; b)\n{\n    auto it1 = a.begin(), it2 = b.begin();\n    int  cnt = 0;\n    while (it1 != a.end() &amp;&amp; it2 != b.end()) {\n        if (*it1 == *it2) {\n            ++cnt;\n            ++it1;\n            ++it2;\n        } else if (*it1 &lt; *it2)\n            ++it1;\n        else\n            ++it2;\n    }\n    return cnt;\n}\n\nint main()\n{\n    int N;\n    cin &gt;&gt; N;\n    vector&lt;set&lt;int&gt;&gt; set(N + 1);\n    for (int i = 1; i &lt;= N; ++i) {\n        int M;\n        cin &gt;&gt; M;\n        while (M--) {\n            int num;\n            cin &gt;&gt; num;\n            set[i].insert(num);\n        }\n    }\n    int K;\n    cin &gt;&gt; K;\n    cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1);\n    while (K--) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        int cnt = count(set[a], set[b]);\n        cout &lt;&lt; cnt / double(set[a].size() + set[b].size() - cnt) * 100 &lt;&lt; \"%\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/sharing/","title":"Sharing","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1032 Sharing (25 point(s))</p>"},{"location":"solutions/pat/sharing/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u7531\u94fe\u8868\u6307\u89c6\uff0c\u516c\u5171\u5b57\u6bcd\u516c\u7528\uff0c\u627e\u51fa\u7b2c\u4e00\u4e2a\u516c\u5171\u5b57\u6bcd\u7684\u5730\u5740</p>"},{"location":"solutions/pat/sharing/#_2","title":"\u601d\u8def","text":"<p>\u5148\u904d\u5386\u4e00\u4e2a\u5355\u8bcd\uff0c\u5c06\u5176\u4e2d\u7684\u5b57\u6bcd\u8bbe\u4e3a\u5df2\u88ab\u8bbf\u95ee\u7684\u72b6\u6001\uff0c\u7136\u540e\u904d\u5386\u53e6\u4e00\u4e2a\u5355\u8bcd\uff0c\u5f53\u78b0\u5230\u5df2\u88ab\u8bbf\u95ee\u7684\u5b57\u6bcd\u65f6\u8868\u660e\uff0c\u5f53\u524d\u7684\u5b57\u6bcd\u5373\u4e3a\u6240\u6c42\u5b57\u6bcd</p>"},{"location":"solutions/pat/sharing/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct node {\n    int  next{};\n    bool status = false;\n} l[100010];\n\nint main()\n{\n    int s1, s2, n;\n    cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; n;\n    int  address, next;\n    char c;\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; address &gt;&gt; c &gt;&gt; next;\n        l[address].next = next;\n    }\n    int p;\n    for (p = s1; p != -1; p = l[p].next)\n        l[p].status = true;\n    for (p = s2; p != -1; p = l[p].next)\n        if (l[p].status)\n            break;\n    if (p == -1)\n        cout &lt;&lt; -1;\n    else\n        cout &lt;&lt; setw(5) &lt;&lt; setfill('0') &lt;&lt; p;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/shortest-distance/","title":"Shortest Distance","text":""},{"location":"solutions/pat/shortest-distance/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5728\u4e00\u4e2aloop\u4e2d\uff0c\u627e\u4e24\u70b9\u7684\u6700\u77ed\u8ddd\u79bb</p>"},{"location":"solutions/pat/shortest-distance/#_2","title":"\u601d\u8def","text":"<p>\u5728\u8f93\u5165\u65f6\uff0c\u5c31\u8ba1\u7b97\u51fa\u6240\u6709\u8ddd\u79bb\u7684\u548c<code>sum</code>\uff0c\u7531\u4e8e\u672c\u9898\u76ee\u70b9\u4e2a\u6570\u6700\u5927\u4e3a\\(10^5\\)\uff0c\u67e5\u8be2\u7684\u7ec4\u6570\u6700\u5927\u4e3a\\(10^4\\)\u91cf\u7ea7\uff0c\u6240\u4ee5\u6309\u7167\u6765\u4e00\u7ec4\u67e5\u4e00\u6b21\u7684\u65b9\u5f0f\u5f88\u5bb9\u6613\u8d85\u65f6\uff0c\u6240\u4ee5\u5728\u8f93\u5165\u65f6\u5c31**\u6309\u987a\u65f6\u9488\u65b9\u5411\u7684\u9488\u5bf9\u4e00\u4e2a\u57fa\u70b9\u7684\u8ddd\u79bb<code>distance</code>**\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5c31\u5f88nice</p>"},{"location":"solutions/pat/shortest-distance/#_3","title":"\u95ee\u9898","text":"<p>\u592a\u4e45\u6ca1\u7528c\u4e86\uff0c\u4e00\u53ea\u7528c++\uff0c\u90fd\u5fd8\u8bb0<code>scanf</code>\u4e2d\u662f\u8981\u5199\u53d8\u91cf\u5730\u5740\u7684\ud83d\ude05\uff0c\u771f\u5c34\u5c2c\uff0c\u66f4\u65b0\u7528c++\u5199</p>"},{"location":"solutions/pat/shortest-distance/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\n    int N;\n    cin &gt;&gt; N;\n    vector&lt;int&gt; D(N), distance;\n    // distance[i]\u8868\u793a\u4ece\u4e0b\u6807\u4e3a0\u5230\u4e0b\u6807\u4e3ai\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n    distance.push_back(0);\n    int sum = 0;\n    for (auto i = 0; i != N; ++i) {\n        cin &gt;&gt; D[i];\n        if (i)\n            distance.push_back(sum);\n        sum += D[i];\n    }\n    int M, a, b;\n    cin &gt;&gt; M;\n    while (M--) {\n        cin &gt;&gt; a &gt;&gt; b;\n        if (a &gt; b)\n            swap(a, b);\n        // \u5e8f\u53f7\u53d8\u4e3a\u4e0b\u6807\n        auto temp = distance[b - 1] - distance[a - 1];\n        cout &lt;&lt; min(temp, sum - temp) &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/shuffling-machine/","title":"Shuffling Machine","text":""},{"location":"solutions/pat/shuffling-machine/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5bf954\u5f20\u724c\u8fdb\u884c\u7ed9\u5b9a\u6b21\u6570\u4e14\u7ed9\u5b9a\u5e8f\u5217\u7684\u6d17\u724c\u6a21\u62df\u3002</p>"},{"location":"solutions/pat/shuffling-machine/#_2","title":"\u601d\u8def","text":"<p>\u8bbe\u4e00\u4e2a<code>res</code>\u6570\u7ec4\u7528\u6765\u8bb0\u5f55\u6700\u7ec8\u7b2ci\u5f20\u724c\u5728\u521d\u59cb\u5e8f\u5217(S1~S13,...,D13,J1,J2)\u4e2d\u7684\u5e8f\u53f7\u3002\u5bf9\u6bcf\u4e2a\u724c\u6839\u636e\u7ed9\u5b9a\u7684<code>shuffleseq</code>\u8fdb\u884c\u7ed9\u5b9a<code>cnt</code>\u6b21\u5957\u5a03\u67e5\u627e\u3002\u6700\u7ec8\u7ed3\u679c\u6839\u636e\u521d\u59cb\u5e8f\u5217\u7684\u5e8f\u53f7\u8fdb\u884c\u6620\u5c04\uff0c\u4e0d\u9ebb\u70e6.</p>"},{"location":"solutions/pat/shuffling-machine/#_3","title":"\u95ee\u9898","text":"<p>\u4e0d\u5ba1\u9898... <code>no extra space at the end of the line</code>\u8fd9\u51e0\u884c\u5b57\u88ab\u6211\u5403\u4e86\uff0c\u592a\u4e45\u6ca1\u505a\u9898\u4e86\u3002</p>"},{"location":"solutions/pat/shuffling-machine/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    int cnt; // \u5faa\u73af\u6b21\u6570\n    // \u6d17\u724c\u5e8f\u5217\u3001\u6700\u7ec8\u7ed3\u679cres--res[i]\u4e2d\u8bb0\u5f55\u7684\u662f\u7b2ci\u4e2a\u724c\u5728\u521d\u59cb\u5e8f\u5217\u7684\u987a\u5e8f\n    vector&lt;int&gt; shuffleSeq, res(55);\n    shuffleSeq.push_back(-1);\n    const char card[5] = {'S', 'H', 'C', 'D', 'J'};\n    if (cin &gt;&gt; cnt, cnt) {\n        for (int n; cin &gt;&gt; n; shuffleSeq.push_back(n))\n            ;\n        int curP, truP = 1;\n        for (int i = 1; i != 55; ++i) {\n            curP = i;\n            // \u5faa\u73afcnt\u6b21\n            for (int j = 0; j != cnt; ++j) {\n                truP = shuffleSeq[curP];\n                curP = truP;\n            }\n            // \u7b2ci\u4e2a\u724c\u6700\u7ec8\u4f4d\u7f6e\u4e3atruP\n            res[truP] = i;\n        }\n    }\n    // \u5faa\u73af\u6b21\u6570\u4e3a0\n    else\n        for (auto it = res.begin() + 1; it != res.end(); ++it)\n            *it = it - res.begin();\n    for (auto it = res.begin() + 1; it != res.end(); ++it) {\n        // \u683c\u5f0f\u4fee\u6b63\uff0c\u5982\u521d\u59cb\u4e3a\u7b2c25\u4e2a\u724c\u662f(25-1)/13 = 1,H\u7ec4\u7684\u7b2c(25-1)%13+1 = 12\u4e2a\uff0c\u5373H12\n        cout &lt;&lt; card[(*it - 1) / 13] &lt;&lt; ((*it - 1) % 13 + 1);\n        // \u6700\u540e\u672b\u5c3e\u4e0d\u8f93\u51fa\u7a7a\u683c\n        if (it - res.begin() != 54)\n            cout &lt;&lt; ' ';\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/sign-in-and-sign-out/","title":"Sign in and Sign out","text":"<p>\u9898\u76ee\u94fe\u63a51006 Sign In and Sign Out (25 \u5206)</p>"},{"location":"solutions/pat/sign-in-and-sign-out/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u6839\u636e\u65f6\u95f4\uff0c\u8f93\u51fa\u6700\u65e9\u6765\u548c\u6700\u665a\u8d70\u7684\u4eba\u7684<code>id</code></p>"},{"location":"solutions/pat/sign-in-and-sign-out/#_2","title":"\u601d\u8def","text":"<p>\u8f93\u5165\u65f6\u5373\u7528<code>earliest</code>\u548c<code>latest</code>\u5904\u7406\u4fdd\u5b58\u5f53\u524d\u5df2\u7ecf\u8f93\u5165\u7684\u4eba\u4e2d\u7684\u6700\u65e9\u548c\u6700\u665a</p>"},{"location":"solutions/pat/sign-in-and-sign-out/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct employee {\n    string id;\n    int    hour{}, minute{}, second{};\n\n} temp, earliest, latest;\n\nbool great(employee&amp; a, employee&amp; b)\n{\n    if (a.hour != b.hour)\n        return a.hour &gt; b.hour;\n    else if (a.minute != b.minute)\n        return a.minute &gt; b.minute;\n    else\n        return a.second &gt; b.second;\n}\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    earliest.hour = 24, earliest.minute = 60, earliest.second = 60;\n    latest.hour = latest.minute = latest.second = 0;\n    while (n--) {\n        char c;\n        cin &gt;&gt; temp.id &gt;&gt; temp.hour &gt;&gt; c &gt;&gt; temp.minute &gt;&gt; c &gt;&gt; temp.second;\n        if (!great(temp, earliest))\n            earliest = temp;\n        cin &gt;&gt; temp.hour &gt;&gt; c &gt;&gt; temp.minute &gt;&gt; c &gt;&gt; temp.second;\n        if (great(temp, latest))\n            swap(temp, latest); // \u6ce8\u610f\u7528swap\u7684\u8bdd\uff0c\u53ea\u80fd\u4ea4\u6362\u4e00\u6b21\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u503c\u9700\u8981\u66f4\u65b0\n    }\n    cout &lt;&lt; earliest.id &lt;&lt; \" \" &lt;&lt; latest.id;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/speech-patterns/","title":"Speech Patterns","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1071 Speech Patterns (25 point(s))</p>"},{"location":"solutions/pat/speech-patterns/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd</p>"},{"location":"solutions/pat/speech-patterns/#_2","title":"\u601d\u8def","text":"<p>\u7edf\u8ba1\u5355\u8bcd\u6570\uff0c\u4e5f\u5c31\u662f\u8981\u5206\u5272\u5355\u8bcd\uff0c\u8fd9\u91cc\u6ce8\u610f\u5355\u8bcd\u6709\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u7ec4\u6210\uff0c\u4ee5\u53ca\u5bf9\u975e\u6709\u6548\u5b57\u7b26\u7684\u5224\u65ad</p>"},{"location":"solutions/pat/speech-patterns/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main()\n{\n    map&lt;string, int&gt; count;\n    string           str;\n    getline(cin, str);\n    int i = 0;\n    while (i &lt; str.length()) {\n        string word;\n        while (i &lt; str.length() &amp;&amp; isalnum(str[i])) {\n            if (str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z') // \u6539\u4e3a\u5c0f\u5199\n                str[i] += 32;\n            word += str[i++];\n        }\n        if (!word.empty()) { // \u7edf\u8ba1\u51fa\u662f\u4e2a\u5355\u8bcd\n            if (count.find(word) == count.end())\n                count[word] = 1;\n            else\n                ++count[word];\n        }\n        while (i &lt; str.length() &amp;&amp; !isalnum(str[i]))\n            ++i; // \u8df3\u8fc7\u975e\u5355\u8bcd\u5b57\u7b26\n    }\n    string ans;\n    int    max = 0;\n    for (auto&amp; it : count) {\n        if (it.second &gt; max) {\n            max = it.second;\n            ans = it.first;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; \" \" &lt;&lt; max;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/spell-it-right/","title":"Spell it Right","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1005 Spell It Right (20 point(s))</p>"},{"location":"solutions/pat/spell-it-right/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u5c06\u7ed9\u5b9a\u7684\u6570\u6bcf\u4e00\u4f4d\u52a0\u8d77\u6765\uff0c\u8f93\u51fa\u548c\u7684\u6bcf\u4e00\u4f4d\u7684\u82f1\u6587</p>"},{"location":"solutions/pat/spell-it-right/#_2","title":"\u601d\u8def","text":"<p>\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u7528\u597d<code>to_string</code>\u3002\u53e6\u5916\uff0c\u5b66\u4e60\u4e86\u5982\u4f55\u5728<code>auto</code>\u904d\u5386\u4e2d\u5224\u65ad\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20</p>"},{"location":"solutions/pat/spell-it-right/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nchar number[11][6] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"};\nint  main()\n{\n    string str;\n    cin &gt;&gt; str;\n    int sum = 0;\n    for (auto&amp; s : str) {\n        sum += s - '0';\n    }\n    string ans = to_string(sum);\n    for (auto&amp; s : ans) {\n        cout &lt;&lt; number[s - '0'];\n        if (&amp;s != &amp;ans.back()) // \u5224\u65ad\u662f\u5426\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u6bd4\u8f83\u5730\u5740\n            cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/student-list-for-course/","title":"Student List for Course","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1047 Student List for Course (25 point(s))</p>"},{"location":"solutions/pat/student-list-for-course/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8ddf<code>A1039</code>\u53cd\u8fc7\u6765\u4e86\uff0c\u7ed9\u4f60\u5b66\u751f\u4fe1\u606f\uff0c\u8f93\u51fa\u6bcf\u4e2a\u8bfe\u7a0b\u9009\u7684\u5b66\u751f\u4fe1\u606f\u3002</p>"},{"location":"solutions/pat/student-list-for-course/#_2","title":"\u601d\u8def","text":"<p>\u521a\u5f00\u59cb\uff0c\u76f4\u63a5\u5c06\u5b66\u751f\u540d\u5b57\u5b58\u5165<code>course</code>\u5411\u91cf\uff0c\u4f46\u6700\u540e\u4e00\u4e2a\u603b\u8d85\u65f6\uff0c\u540e\u6765\u662f\u7528<code>unordered_map</code>\u5b58\u50a8\u5b66\u751f\u4e0b\u6807\u4e0e\u540d\u5b57\u7684\u6620\u5c04\uff0c\u4ee5\u4e3a\u662f<code>emplace_back</code> <code>string</code>\u7684\u65f6\u5019\u8017\u65f6\uff0c\u4f46\u6700\u540e\u4e00\u4e2a\u8fd8\u662f\u8d85\u65f6\uff0c\u6700\u540e\u7ecf\u8fc7\u641c\u5bfb\uff0c\u624d\u77e5\u9053\u662f<code>cout</code>\u5bfc\u81f4\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9898\u7528\u4e0d\u7740<code>unordered_map</code>\u3002</p> <p>\u53e6\u5916\u4e0d\u5f97\u4e0d\u5410\u69fd\u4e00\u4e0b\uff0c\u9898\u76ee\u4e2d\u672c\u6765\u5c31\u8bf4\u672b\u5c3e\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u884c\uff0c\u4e0b\u9762\u4ee3\u7801\u4e5f\u6ca1\u6709\u5bf9\u6700\u540e\u4e00\u884c\u8f93\u51fa\u6709\u5224\u65ad\u5c31\u80fd<code>AC</code>\uff0c\u5c31\u5f88\u65e0\u8bed\uff0c\uff0c\uff0c</p>"},{"location":"solutions/pat/student-list-for-course/#cout","title":"<code>cout</code>\u8d85\u65f6\u95ee\u9898\u5206\u6790","text":"<p>\u4e0a\u8ff0\u601d\u8def\u4e2d\uff0c\u5df2\u7ecf\u8868\u8ff0\uff0c\u521d\u6b65\u5199\u7684\u4ee3\u7801\u4e2d\uff0c\u8fc7\u4e0d\u4e86\u7b2c\u4e09\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u4e00\u76f4\u8d85\u65f6\uff0c\u4e0b\u9762\u662f\u6211\u7684\u5904\u7406\u5206\u6790\u8fc7\u7a0b\uff1a</p> <p>\u7ecf\u8fc7\u641c\u5bfb\u8d44\u6599\uff0c\u5f97\u77e5\uff1a<code>cout</code>\u6bd4<code>printf</code>\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u53ea\u6709\u5f53\u7f13\u51b2\u533a\u5199\u6ee1\u7684\u65f6\u5019\u624d\u4f1a\u771f\u6b63\u8f93\u51fa\uff0c\u800c\u5f53\u4f7f\u7528<code>std::endl</code>\u8f93\u51fa\u6362\u884c\u65f6\uff0c\u672b\u5c3e\u4f1a\u518d\u8fd0\u884c\u4e00\u4e2a<code>flush</code>\u5f3a\u884c\u6e05\u9664\u7f13\u51b2\u533a\uff0c\u8fd9\u6837\u5c31\u6ca1\u80fd\u53d1\u6325<code>cout</code>\u4e2d\u7f13\u51b2\u533a\u7684\u4f18\u5316\uff0c\u6240\u4ee5\u663e\u5f97\u8fd0\u884c\u65f6\u95f4\u8981\u957f\u3002\u4f46\u5f53\u4f7f\u7528<code>\"\\n\"</code>\u8f93\u51fa\u6362\u884c\u65f6\uff0c\u5c31\u8ddf<code>printf</code>\u5dee\u4e0d\u591a\u4e86\uff08\u5c31\u672c\u9898\u800c\u8a00\uff09\u3002</p> <p>\u53e6\u5916\uff0c<code>printf</code>\u4e0e<code>cout</code>\u4e0d\u8981\u6df7\u7528\uff0c\u56e0\u4e3a\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u4ed6\u4eec\u7684\u6267\u884c\u987a\u5e8f\u4e0d\u4e00\u5b9a\u4f1a\u662f\u6267\u884c\u5b8c\u4e00\u4e2a\u518d\u6267\u884c\u53e6\u4e00\u4e2a\uff0c\u800c\u4e00\u4e2a\u4e0d\u4f7f\u7528\u7f13\u51b2\u533a\u7684\u7a81\u7136\u8df3\u5230\u4f7f\u7528\u7f13\u51b2\u533a\u7684\u8f93\u51fa\u65b9\u5f0f\uff0c\u6216\u8005\u53cd\u8fc7\u6765\uff0c\u4f1a\u9020\u6210\u975e\u671f\u671b\u7684\u7ed3\u679c\u3002</p> <p>\u6240\u4ee5\uff0c\u6700\u7ec8\u7ed3\u8bba\u662f\uff0c\u8fd9\u9053\u9898\uff0c<code>cout</code>\u4f7f\u7528<code>\\n</code>\u8f93\u51fa\u6362\u884c\u4e00\u6837\u4e5f\u80fd\u8fc7\uff01\uff01\uff01</p>"},{"location":"solutions/pat/student-list-for-course/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n// #include &lt;cstdio&gt;\nusing namespace std;\n\nint main()\n{\n    int N, K;\n    istream::sync_with_stdio(false); // \u5173\u95ed\u540c\u6b65\uff0c\u65f6\u95f4\u4e0a\u4f1a\u5feb\u4e2a\u7ea6200\u591ams\n    cin &gt;&gt; N &gt;&gt; K;\n    vector&lt;vector&lt;string&gt;&gt; course(K + 1);\n    for (int i = 0; i &lt; N; ++i) {\n        string name;\n        int    num, id;\n        cin &gt;&gt; name &gt;&gt; num;\n        for (int j = 0; j &lt; num; ++j) {\n            cin &gt;&gt; id;\n            course[id].emplace_back(name);\n        }\n    }\n    for (int i = 1; i &lt;= K; ++i) {\n        // printf(\"%d %d\\n\", i, course[i].size());\n        cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; course[i].size() &lt;&lt; \"\\n\";\n        // \u540c\u6837\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff0c\u771f\u7684\u5f88\u7b80\u6d01\n        sort(course[i].begin(), course[i].end(), [](string a, string b) { return a &lt; b; });\n        for (auto&amp; it : course[i]) {\n            // printf(\"%s\\n\", it.c_str()); // c_str() \u8f6c\u6362\u6210c\u8bed\u8a00\u98ce\u683c\u65f6\u5b57\u7b26\u4e32\n            cout &lt;&lt; it &lt;&lt; \"\\n\";\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/summary/","title":"Summary","text":""},{"location":"solutions/pat/summary/#advanced","title":"Advanced","text":"Number Link A1001 A+B Format A1002 A+B for Polynomials A1004 Counting Leaves A1005 Spell it Right A1006 Sign In and Sign Out A1009 Product of Polynomials A1011 World Cup Betting A1014 Waiting In Line A1019 General Palindromic Number A1020 Tree Traversals A1022 Digital Library A1031 Hello World for U A1032 Sharing A1035 Password A1036 Boys vs Girls A1039 Course List for Student A1042 Shuffling Machine A1046 Shortest Distance A1047 Student List for Course A1051 Pop Sequence A1052 Linked List Sorting A1054 The Dominant Color A1056 Mice And Rice A1060 Are They Equal A1061 Dating A1063 Set Similarity A1065 A+B and C (64bit) A1071 Speech Patterns A1073 Scientific Notation A1074 Reversing Linked List A1077 Kuchiguse A1082 Read Number In Chinese A1086 Tree Traversals Again A1091 Acute Stroke A1097 Deduplication On A Linked List A1100 Mars Numbers A1102 Invert A Binary Tree A1103 Integer Factorization A1109 Group Photo"},{"location":"solutions/pat/summary/#basic","title":"Basic","text":""},{"location":"solutions/pat/the-dominant-color/","title":"The Dominant Color","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1054 The Dominant Color (20 point(s))</p>"},{"location":"solutions/pat/the-dominant-color/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7edf\u8ba1\u4e00\u4e2a\u77e9\u9635\u4e2d\u8d85\u8fc7\u534a\u6570\uff08\u672c\u9898\u4fdd\u8bc1\u4e86\uff09\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c</p>"},{"location":"solutions/pat/the-dominant-color/#_2","title":"\u601d\u8def","text":"<p>\u672c\u6765\u53ef\u4ee5\u5f00\u8f9f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u7ec4\uff0cm * n\u6765\u4fdd\u5b58\u6bcf\u4e2a\u53ef\u80fd\u7684\u503c\uff0c\u4f46\u662f\u9898\u76ee\u4e2d\u7684\u503c\u8303\u56f4\u4e3a[0, 2^24]\uff0c\u8fc7\u4e8e\u5927\u4e86\uff0c\u6240\u4ee5\u91c7\u7528<code>map</code>\u6620\u5c04\u7684\u529e\u6cd5\u3002</p>"},{"location":"solutions/pat/the-dominant-color/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main()\n{\n    int m, n;\n    ios::sync_with_stdio(false);\n    cin &gt;&gt; m &gt;&gt; n;\n    int           color;\n    map&lt;int, int&gt; count; // color\u4e0ecount\u6b21\u6570\u7684\u6620\u5c04\n    for (int i = 0; i &lt; n; ++i) {\n        for (int j = 0; j &lt; m; ++j) {\n            cin &gt;&gt; color;\n            if (count.find(color) == count.end()) // \u8fd8\u672a\u88ab\u7edf\u8ba1\n                count[color] = 1;                 // \u8ba1\u6570\u4e3a1\n            else\n                ++count[color];\n        }\n    }\n    // \u904d\u5386map\uff0c\u6c42\u51fa\u6700\u5927\u7684\u90a3\u4e2acolor\n    int maxColor = 0, maxCount = 0;\n    for (auto it = count.begin(); it != count.end(); ++it) {\n        if (it-&gt;second &gt; maxCount) {\n            maxCount = it-&gt;second;\n            maxColor = it-&gt;first;\n        }\n    }\n    cout &lt;&lt; maxColor &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/tree-traversals-again/","title":"Tree Traversals Again","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1086 Tree Traversals Again (25 point(s))</p>"},{"location":"solutions/pat/tree-traversals-again/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\uff0c\u4ee5\u53ca\u7528\u6808\u5b9e\u73b0\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u8981\u6c42\u7ed9\u51fa\u540e\u5e8f\u904d\u5386\u5e8f\u5217</p>"},{"location":"solutions/pat/tree-traversals-again/#_2","title":"\u601d\u8def","text":"<p>\u6839\u636e\u6808\u7684\u64cd\u4f5c\u5e8f\u5217\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u51fa\u8fd9\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\uff08\u5373\uff0c<code>push</code>\u7684\u987a\u5e8f\uff09\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff08\u5373\uff0c<code>pop</code>\u7684\u987a\u5e8f\uff09\uff0c\u7136\u540e\u6839\u636e\u524d\u5e8f\u548c\u4e2d\u5e8f\u5f97\u51fa\u4e8c\u53c9\u6811\u7136\u540e\u518d\u540e\u5e8f\u904d\u5386\u5373\u53ef\u3002</p> <p>\u4f46\uff0c\u6211\u7b2c\u4e00\u53cd\u5e94\u6ca1\u6709\u60f3\u7740\u8fd9\u6837\u5b50\u5f04\uff0c\u53ef\u80fd\u662f\u9093\u516c\u7684\u6570\u636e\u7ed3\u6784\u8ba9\u6211\u5bf9\u4e2d\u5e8f\u904d\u5386\u7684\u8fed\u4ee3\u5b9e\u73b0\u7684\u5f62\u5f0f\u6709\u4e86\u66f4\u591a\u7684\u4e86\u89e3\uff0c\u6211\u7b2c\u4e00\u53cd\u5e94\u662f\u76f4\u63a5\u6839\u636e\u6808\u7684\u64cd\u4f5c\u5e8f\u5217\u6784\u9020\u4e00\u68f5\u6811\uff0c\u5373\u7b2c\u4e00\u4e2a\u4e00\u5b9a\u662f<code>push</code>\u7136\u540e\u8fd9\u4e2a<code>push</code>\u7684\u4e00\u5b9a\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a<code>push</code>\u540e\u7d27\u8ddf\u7684<code>push</code>\u4e00\u5b9a\u90fd\u662f\u4e00\u4e2a\u5de6\u4fa7\u94fe\uff0c\u5373\u5747\u662f\u4e0a\u4e00\u4e2a\u7684\u5de6\u5b69\u5b50\uff1b\u5f53\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u662f<code>push</code>\u800c\u5f53\u524d\u64cd\u4f5c\u662f<code>pop</code>\u65f6\uff0c\u8868\u660e\uff0c\u6b64\u65f6\u5df2\u8fbe\u5f53\u524d\u5de6\u4fa7\u94fe\u7684\u6700\u5e95\u7aef\uff0c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u4e14\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u88ab<code>pop</code>\uff0c\u6b64\u65f6\u5e94\u5f53\u8f6c\u5411\u5176\u53f3\u5b69\u5b50\u8fdb\u884c\u8003\u5bdf\uff0c\u5f53\u53f3\u5b69\u5b50\u8003\u5bdf\u5b8c\u6bd5\u540e\u5e94\u8be5\u987a\u7740\u7236\u8282\u70b9\uff0c\u4e00\u76f4\u627e\u5230\u672a\u88ab<code>pop</code>\u7684\u7236\u8282\u70b9\uff0c<code>pop</code>\u5b83\u7136\u540e\u8f6c\u5411\u5b83\u7684\u53f3\u5b69\u5b50\u3002</p> <p>\u8be6\u89c1\u4ee3\u7801</p>"},{"location":"solutions/pat/tree-traversals-again/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n    int          data;\n    struct node* left;\n    struct node* right;\n    struct node* parent; // \u65b9\u4fbf\u56de\u6eaf\n    bool status{false}; // \u4e3atrue\u65f6\u8868\u793a\u5f53\u524d\u8282\u70b9\u5df2\u88ab\u6808\u64cd\u4f5cpop\u6389\uff0c\u5373\u5e94\u5f53\u8003\u5bdf\u5176\u53f3\u5b69\u5b50\uff08\u5982\u679c\u5b58\u5728\uff09\n};\nint         n;\nvector&lt;int&gt; post; // NOLINT\n\nvector&lt;string&gt; op;\nnode*          construct()\n{\n    node* root = new node;\n    root-&gt;data = op[0][5] - '0';\n    if (op[0].size() == 7) // \u4e00\u4e2a\u5751\uff0cn\u53d6\u503c\u53ef\u4ee5\u662f\u4e24\u4f4d\u6570\uff0c\u6211\u91c7\u7528\u7684\u662f\u5b57\u7b26\u4e32\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u6240\u4ee5\u8981\u8003\u8651\u5230\u8fd9\u79cd\u60c5\u51b5\u3002\n        root-&gt;data = root-&gt;data * 10 + op[0][6] - '0';\n    node* temp = root;\n    bool  flag = true;\n    for (auto it = op.begin() + 1; it != op.end(); ++it) {\n        if (flag &amp;&amp; (*it)[1] == 'u') { // \u6b64\u65f6\u8868\u793atemp\u8981\u63a5\u5165\u5de6\u5b69\u5b50\n            node* left = new node;\n            int   num  = (*it)[5] - '0';\n            if (it-&gt;size() == 7)\n                num = num * 10 + (*it)[6] - '0';\n            left-&gt;data   = num;\n            temp-&gt;left   = left;\n            left-&gt;parent = temp;\n            temp         = temp-&gt;left;\n        } else if (flag &amp;&amp; (*it)[1] == 'o') { // \u8868\u793atemp\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u4e14temp\u88abpop\u6389\u4e86\n            flag         = !flag;\n            temp-&gt;status = true;\n            temp-&gt;left   = nullptr;\n        } else if (!flag &amp;&amp; (*it)[1] == 'o') { // \u8868\u793atemp\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u4e14temp\u7684\u6700\u8fd1\u4e00\u4e2a\u672a\u88abpop\u7684\u7956\u7236\u8be5\u88abpop\n            temp-&gt;right = nullptr;\n            temp        = temp-&gt;parent;\n            while (temp-&gt;status) // \u627e\u5230\u8fd8\u672a\u88abpop\u7684\u7956\u7236\n                temp = temp-&gt;parent;\n            temp-&gt;status = true;               // \u5c06\u5176pop\n        } else if (!flag &amp;&amp; (*it)[1] == 'u') { // \u8868\u793atemp\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u63a5\u5165\n            flag        = !flag;\n            node* right = new node;\n            int   num   = (*it)[5] - '0';\n            if (it-&gt;size() == 7)\n                num = num * 10 + (*it)[6] - '0';\n            right-&gt;data   = num;\n            temp-&gt;right   = right;\n            right-&gt;parent = temp;\n            temp          = temp-&gt;right;\n        }\n    }\n    return root;\n}\n\nvoid traverse(node*&amp; tree)\n{\n    if (!tree)\n        return;\n    traverse(tree-&gt;left);\n    traverse(tree-&gt;right);\n    post.emplace_back(tree-&gt;data);\n}\n\nint main()\n{\n    cin &gt;&gt; n;\n    cin.get();\n    op.resize(2 * n);\n    for (int i = 0; i &lt; 2 * n; ++i)\n        getline(cin, op[i]);\n    node* tree = construct();\n    traverse(tree);\n    for (auto&amp; it : post) {\n        cout &lt;&lt; it;\n        if (&amp;it != &amp;post.back())\n            cout &lt;&lt; \" \";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/tree-traversals/","title":"Tree Traversals","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a1020 Tree Traversals (25 point(s))</p>"},{"location":"solutions/pat/tree-traversals/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3001\u540e\u7eed\u904d\u5386\u5e8f\u5217\u3001\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u8981\u6c42\u8f93\u51fa\u5176\u5c42\u5e8f\u904d\u5386\u5e8f\u5217</p>"},{"location":"solutions/pat/tree-traversals/#_2","title":"\u601d\u8def","text":"<p>\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\uff0c\u540e\u7eed\u904d\u5386\u53ef\u4ee5\u786e\u5b9a\u5b50\u6811\u7684\u6839\uff0c\u5148\u6784\u9020\u51fa\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u505a\u5c42\u5e8f\u904d\u5386\u5373\u53ef</p>"},{"location":"solutions/pat/tree-traversals/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct node {\n    int          data;\n    struct node* left;\n    struct node* right;\n};\nint         n;\nvector&lt;int&gt; post; // NOLINT\nvector&lt;int&gt; in;   // NOLINT\nvector&lt;int&gt; layer;\n\nnode* construct(int in_l, int in_r, int post_l, int post_r)\n{\n    if (in_r - in_l &lt; 1) {\n        return nullptr;\n    }\n    int   key  = post_r - 1;\n    node* root = new node;\n    root-&gt;data = post[key];\n    int i      = in_l;\n    for (; i != in_r; ++i) {\n        if (in[i] == post[key])\n            break;\n    }\n    root-&gt;left  = construct(in_l, i, post_l, post_r - in_r + i);\n    root-&gt;right = construct(i + 1, in_r, post_r - in_r + i, post_r - 1);\n    return root;\n}\n\nvoid traverse(node*&amp; tree)\n{\n    if (!tree)\n        return;\n    queue&lt;node*&gt; q;\n    q.push(tree);\n    while (!q.empty()) {\n        node* front = q.front();\n        q.pop();\n        layer.emplace_back(front-&gt;data);\n        if (front-&gt;left)\n            q.push(front-&gt;left);\n        if (front-&gt;right)\n            q.push(front-&gt;right);\n    }\n}\n\nint main()\n{\n    cin &gt;&gt; n;\n    post.resize(n);\n    in.resize(n);\n    for (auto&amp; it : post)\n        cin &gt;&gt; it;\n    for (auto&amp; it : in)\n        cin &gt;&gt; it;\n    node* tree = construct(0, n, 0, n);\n    traverse(tree);\n    for (auto&amp; it : layer) {\n        cout &lt;&lt; it;\n        if (&amp;it != &amp;layer.back()) {\n            cout &lt;&lt; \" \";\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/waiting-in-line/","title":"Waiting in Line","text":"<p>\u9898\u76ee\u94fe\u63a51014 Waiting in Line (30 \u5206)</p>"},{"location":"solutions/pat/waiting-in-line/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u6392\u5e8f\u8c03\u5ea6</p>"},{"location":"solutions/pat/waiting-in-line/#_2","title":"\u601d\u8def","text":"<p>\u6309\u65f6\u95f4\u4e00\u6b65\u6b65\u6a21\u62df\u987e\u5ba2\u88ab\u670d\u52a1\u7684\u8fc7\u7a0b</p>"},{"location":"solutions/pat/waiting-in-line/#_3","title":"\u95ee\u9898","text":"<p>\u53ea\u4f7f\u7528<code>vector</code>\u8fc7\u4e86\u6d4b\u8bd5\u70b94\u30015\u6ca1\u8fc7\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u89e3\u51b3\uff0c\u540e\u7eed\u5c1d\u8bd5\u4f7f\u7528<code>queue</code>\u89e3\u51b3\u3002</p>"},{"location":"solutions/pat/waiting-in-line/#vector","title":"<code>vector</code>\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass customer {\npublic:\n    int time;  // \u9700\u8981\u670d\u52a1\u7684\u65f6\u95f4\n    int done;  // \u670d\u52a1\u7ed3\u675f\u65f6\u95f4\n    int serve; // \u670d\u52a1\u5f00\u59cb\u65f6\u95f4\n};\n\nbool empty(vector&lt;vector&lt;int&gt;&gt;&amp; windows)\n{\n    bool flag = true;\n    for (auto&amp; window : windows) {\n        if (!window.empty()) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nbool quick(vector&lt;vector&lt;int&gt;&gt;&amp; windows, vector&lt;customer&gt;&amp; customers)\n{\n    bool flag = true;\n    for (auto&amp; window : windows) {\n        if (window.empty())\n            continue;\n        auto ip = window.begin();\n        if (customers[*ip].done == 0) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nint find_min(vector&lt;vector&lt;int&gt;&gt;&amp; windows, vector&lt;customer&gt;&amp; customers)\n{\n    int min = 99999; // \u521d\u503c\u95ee\u9898\n    for (auto&amp; window : windows) {\n        if (!window.empty() &amp;&amp; min &gt; customers[*window.begin()].time)\n            min = customers[*window.begin()].time;\n    }\n    return min;\n}\n\nvoid serve(vector&lt;vector&lt;int&gt;&gt;&amp; windows, vector&lt;customer&gt;&amp; customers, int M)\n{\n    int now = 0;\n    int id  = 0;\n    for (int i = 0; i &lt; M; ++i) {\n        for (auto it = windows.begin(); it != windows.end() &amp;&amp; id &lt; customers.size(); ++it) {\n            if (i == 0)\n                customers[id].serve = 0;\n            it-&gt;push_back(id++);\n        }\n    }\n    while (now &lt;= 540 &amp;&amp; !empty(windows)) {\n        int min = find_min(windows, customers);\n        now += min;\n        for (auto&amp; window : windows) {\n            if (!window.empty()) {\n                auto ip = window.begin();\n                if (customers[*ip].done == 0)\n                    customers[*ip].time -= min;\n                if (customers[*ip].time == 0) {\n                    if (customers[*ip].done == 0)\n                        customers[*ip].done = now;\n                    window.erase(ip);\n                    if (!window.empty()) // \u82e5\u4e0d\u7a7a\uff0c\u5219\u4e0b\u4e00\u4e2a\u5c31\u662f\u670d\u52a1\u5bf9\u8c61\n                        customers[*window.begin()].serve = now;\n                }\n            }\n        }\n        // \u5982\u679c\u8fd8\u6709\u987e\u5ba2\u7b49\u5f85\u5219\u68c0\u67e5\u7a7a\u4f59\u5730\u65b9\u63d2\u5165\u987e\u5ba2\n        if (id &lt; customers.size()) {\n            for (int i = 1; i &lt;= M; ++i) {\n                for (auto&amp; window : windows) {\n                    while (window.size() &lt; i &amp;&amp; id &lt; customers.size()) { // \u961f\u5217\u662f\u5426\u6709\u4f4d\u7f6e\n                        if (window.empty()) {                            // \u961f\u5217\u4e3a\u7a7a, \u5219\u80af\u5b9a\u4f1a\u88ab\u670d\u52a1\n                            if (customers[id].time + now &gt;= 540) {\n                                customers[id].done = customers[id].time + now;\n                            }\n                            customers[*window.begin()].serve = now;\n                        } else {\n                            if (customers[id].time + now + customers[window.front()].time &gt;= 540) {\n                                customers[id].done = customers[id].time + now + customers[window.front()].time;\n                            }\n                        }\n                        window.push_back(id++);\n                    }\n                }\n            }\n        }\n        if (quick(windows, customers))\n            break;\n    }\n}\n\nint main()\n{\n    int N, M, K, Q;\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Q;\n    vector&lt;vector&lt;int&gt;&gt; windows(N);\n    vector&lt;customer&gt;    customers(K);\n    for (auto&amp; customer : customers) {\n        cin &gt;&gt; customer.time;\n        customer.done  = 0;\n        customer.serve = 541;\n    }\n    vector&lt;int&gt; queries(Q);\n    for (int&amp; query : queries) {\n        cin &gt;&gt; query;\n    }\n    serve(windows, customers, M);\n    auto it = customers.begin();\n    for (auto i = 0; i &lt; Q; ++i) {\n        if ((it + queries[i] - 1)-&gt;done &gt; 540) {\n            if ((it + queries[i] - 1)-&gt;serve &lt; 540) {\n                int hour   = (it + queries[i] - 1)-&gt;done / 60 + 8;\n                int minute = (it + queries[i] - 1)-&gt;done % 60;\n                if (hour &gt; 17) {\n                    cout &lt;&lt; \"Sorry\" &lt;&lt; endl;\n                    continue;\n                }\n                hour &gt;= 10 ? (cout &lt;&lt; hour &lt;&lt; \":\") : (cout &lt;&lt; 0 &lt;&lt; hour &lt;&lt; \":\");\n                minute &gt;= 10 ? (cout &lt;&lt; minute &lt;&lt; endl) : (cout &lt;&lt; 0 &lt;&lt; minute &lt;&lt; endl);\n            } else\n                cout &lt;&lt; \"Sorry\" &lt;&lt; endl;\n        } else {\n            int hour   = (it + queries[i] - 1)-&gt;done / 60 + 8;\n            int minute = (it + queries[i] - 1)-&gt;done % 60;\n            hour &gt;= 10 ? (cout &lt;&lt; hour &lt;&lt; \":\") : (cout &lt;&lt; 0 &lt;&lt; hour &lt;&lt; \":\");\n            minute &gt;= 10 ? (cout &lt;&lt; minute &lt;&lt; endl) : (cout &lt;&lt; 0 &lt;&lt; minute &lt;&lt; endl);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"solutions/pat/world-cup-betting/","title":"World Cup Betting","text":"<p>\u9898\u76ee\u94fe\u63a51011 World Cup Betting (20 \u5206)</p>"},{"location":"solutions/pat/world-cup-betting/#_1","title":"\u9898\u5e72\u5927\u610f","text":"<p>\u8fd9\u4e2a\u9898\uff0c\u9898\u76ee\u5199\u7684\u4e0d\u660e\u4e0d\u767d\uff0c\u6211\u6ca1\u592a\u8bfb\u61c2\uff0c\u770b\u4e86\u7b97\u6cd5\u7b14\u8bb0\uff0c\u624d\u77e5\u9053\uff0c\uff0c\uff0c\u53cd\u6b63\u5c31\u662f\uff0c\u9009\u51fa\u6bcf\u884c\u6700\u5927\u7684\uff0c\u6309\u7167\u516c\u5f0f\u8f93\u51fa\u5c31\u597d\u3002\u3002\u3002</p>"},{"location":"solutions/pat/world-cup-betting/#_2","title":"\u601d\u8def","text":"<p>\u7528\u4e00\u4e2a<code>char</code>\u5b58\u653e\u7ed3\u679c\u7684\u5b57\u7b26\uff0c\u91cd\u65b0\u56de\u987e\u4e00\u4e0b<code>cout</code>\u7684\u7cbe\u5ea6\u63a7\u5236</p>"},{"location":"solutions/pat/world-cup-betting/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>#include &lt;iomanip&gt; // \u7cbe\u5ea6\u63a7\u5236\u5934\u6587\u4ef6\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nchar S[3] = {'W', 'T', 'L'};\nint  main()\n{\n    double ans = 1.0, max;\n    int    index;\n    for (int i = 0; i &lt; 3; ++i) {\n        max = 0.0;\n        for (int j = 0; j &lt; 3; ++j) { // \u6bcf\u884c\u5206\u522b\u5904\u7406\n            double temp;\n            cin &gt;&gt; temp;\n            if (temp &gt; max) {\n                max   = temp;\n                index = j;\n            }\n        }\n        ans *= max;\n        cout &lt;&lt; S[index] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(2) &lt;&lt; (ans * 0.65 - 1) * 2; // \u7cbe\u5ea6\u5904\u7406\u683c\u5f0f\n    return 0;\n}\n</code></pre>"},{"location":"solutions/thu/light-house/","title":"LightHouse","text":""},{"location":"solutions/thu/light-house/#_1","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u6bcf\u4e2a\u706f\u5854\u53ef\u4ee5\u7167\u4eae\u4f4d\u4e8e\u5176\u5de6\u4e0b\u548c\u53f3\u4e0a\u7684\u706f\u5854\uff0c\u7ed9\u5b9a\u5750\u6807\uff0c\u627e\u51fa\u80fd\u4e92\u76f8\u7167\u4eae\u7684\u706f\u5854\u7684\u5bf9\u6570\uff0c\u53d8\u76f8\u7684\u9006\u5e8f\u5bf9\u3002</p>"},{"location":"solutions/thu/light-house/#_2","title":"\u601d\u8def","text":"<p>\u5148\u6839\u636e\u5176\u4e2d\u4e00\u4e2a\u5750\u6807\u6392\u5e8f\uff0c\u7136\u540e\u6839\u636e\u53e6\u4e00\u4e2a\u5750\u6807\u627e\u987a\u5e8f\u5bf9</p>"},{"location":"solutions/thu/light-house/#_3","title":"\u95ee\u9898","text":"<p>\u6211\u662f\u8ddf\u7740\u9093\u8001\u5e08\u7684\u6570\u636e\u7ed3\u6784\u8bfe\u7a0b\u8fdb\u5ea6\u505a\u7684\u9898\uff0c\u672c\u60f3\u7740\u7528\u4e24\u6b21\u5f52\u5e76\u6392\u5e8f\uff08\u56e0\u4e3a\u5feb\u6392\u8fd8\u6ca1\u5b66\u5230\uff09\uff0c\u53ef\u5206\u6570\u4e00\u76f4\u5361\u572815\u5206--\uff08RunTime Error-signal 11-SIGSEGV\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4fe1\u53f7\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u7531\u4e8e\u6307\u9488\u8d8a\u754c\u7684\u95ee\u9898\uff0c\u8ba9\u6211\u4e00\u5ea6\u4ee5\u4e3a\u662f\u6211\u5f52\u5e76\u6392\u5e8f\u5199\u9519\u4e86\u3002 \u7ecf\u8fc7\u51e0\u4e2a\u5c0f\u65f6\u7684\u65e0\u80fd\u6323\u624e\uff0c\u7a81\u7136\u8bd5\u4e86\u4e0b\u7f51\u4e0a\u5927\u90e8\u5206\u4eba\u5957\u7528\u7684\u5feb\u6392\u51fd\u6570\uff0c\u4e00\u4e0b\u5c31AC\u4e86\ud83d\ude33 \u7136\u540e\u6211\u518d\u6b21\u9605\u8bfbSIGSEGV\u4fe1\u53f7\u7684\u5e38\u89c1\u7c7b\u578b\uff0c\u53d1\u73b0\u4e86\u7b2c4\u6761\u548c\u7b2c5\u6761\u3002\u3002\u3002</p> <p></p> <ul> <li>\u6211\u81ea\u5df1\u7684\u778e\u731c\u60f3\uff08\u6709\u5f85\u8fdb\u4e00\u6b65\u5b66\u4e60\u7136\u540e\u8003\u8bc1\uff09 \u82e5\u901a\u8fc7\u5f52\u5e76\u6392\u5e8f\u4ee5x\u5750\u6807\u4e3a\u57fa\u51c6\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u6700\u5927\u9700\u8981\u5f00\u8f9f\u4e00\u4e2a\u5355\u5143\u4e2a\u6570\u4e3an\uff0c\u5355\u5143\u5927\u5c0f\u4e3a8B\uff08\u4e24\u4e2aint\uff09\u7684\u6570\u7ec4\uff0c\u7531\u9898\u5bf990%\u7684\u6d4b\u8bd5\u6837\u4f8b\uff0cn\u6700\u5927\u53d63*10^5\uff0c\u8fd9\u4e48\u7b97\u4e0b\u6765\u6700\u5c0f\u60c5\u51b5\u7684\u8fd9\u4e2a\u6700\u5927\u7684\u6570\u7ec4\u8981\u5360\u75282MB\u4ee5\u4e0a\uff0c\u518d\u52a0\u4e0a\u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u6df1\u5ea6\u76f8\u5bf9\u4e8e\u5feb\u901f\u6392\u5e8f\u4e5f\u4e0d\u5c0f\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u8d85\u51fa\u4e86\u51fd\u6570\u5185\u6808\u5185\u5b588MB\u7684\u9650\u5236hhh \u800c\u5feb\u901f\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(logn)\uff0c\u6bd4\u5f52\u5e76\u6392\u5e8f\u7684O(n)\u5c0f\u4e0d\u5c11 \u6216\u8bb8\u5c31\u662f\u8fd9\u4e2a\u539f\u56e0\u5427\uff0c\u6211\u76ee\u524d\u7684\u77e5\u8bc6\u50a8\u91cf\u4e5f\u5c31\u8fd9\u4e86\ud83d\ude43</li> </ul>"},{"location":"solutions/thu/light-house/#ac","title":"AC\u4ee3\u7801","text":"<p>\u5148\u9644\u4e0aAC\u622a\u5c4f\uff0c\u827e\u739b\uff0c\u592a\u4e0d\u5bb9\u6613\u4e86\uff0c\u4e3b\u8981\u662f\u4e0d\u7ed9\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u8ddf\u65e0\u5934\u82cd\u8747\u4e71\u649e\u4e00\u6837\uff0c\u7eaa\u5ff5\u4e00\u4e0b</p> <p></p> <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nstruct LightHouse {\n    int x, y;\n}* lhs;\n\nvoid invBetween(int* y, int l, int mid, int r, long long&amp; cnt)\n{\n    int  la = mid - l;\n    int  lb = r - mid;\n    int* A  = new int[la];\n    for (int i = 0, j = l; i &lt; la; A[i++] = y[j++])\n        ;\n    int* B = y + mid;\n    for (int i = 0, j = 0, k = l; i &lt; la;) {\n        if (j &gt;= lb '' A[i] &lt; B[j]) {\n            y[k++] = A[i++];\n            // \u987a\u5e8f\u5bf9\n            if (j &lt; lb)\n                cnt += (long long)(lb - j);\n        }\n        if (j &lt; lb &amp;&amp; A[i] &gt; B[j])\n            y[k++] = B[j++];\n    }\n    // \u5f52\u5e76\u6392\u5e8f\u6838\u5fc3\u90e8\u5206\u7684\u53e6\u79cd\u5199\u6cd5\uff0c\u6211\u8fd8\u6000\u7591\u8fc7\u5199\u6cd5\u7684\u95ee\u9898\ud83e\udd23\n    //  int i = 0, j = 0, k = l;\n    //  while(i &lt; la)\n    //  {\n    //      if(j &lt; lb &amp;&amp; B[j] &lt; A[i])\n    //      {\n    //          y[k++] = B[j++];\n    //            // \u9006\u5e8f\u5bf9\n    //          cnt += (long long)(la - i);\n    //      }\n    //      else\n    //          y[k++] = A[i++];\n    //  }\n\n    delete[] A;\n}\n\nvoid invInside(int* y, int l, int r, long long&amp; cnt)\n{\n    if (r - l &lt; 2)\n        return;\n    int mid = (l + r) / 2;\n    invInside(y, l, mid, cnt);\n    invInside(y, mid, r, cnt);\n    invBetween(y, l, mid, r, cnt);\n}\n\n// \u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u4e86qsort()\u540e\u5c31\u6ca1\u7528\u4e86\nvoid merge(int l, int mid, int r)\n{\n    int         la = mid - l;\n    int         lb = r - mid;\n    LightHouse* A  = new LightHouse[la];\n    for (int i = 0, j = l; i &lt; lb; A[i++] = lhs[j++])\n        ;\n    LightHouse* B = lhs + mid;\n    int         i = 0, j = 0, k = l;\n    while (i &lt; la) {\n        if (j &lt; lb &amp;&amp; B[j].x &lt; A[i].x)\n            lhs[k++] = B[j++];\n        else\n            lhs[k++] = A[i++];\n    }\n    delete[] A;\n}\nvoid mergeSort(int l, int r)\n{\n    if (r - l &lt; 2)\n        return;\n    int mid = (1 + r) / 2;\n    mergeSort(l, mid);\n    mergeSort(mid, r);\n    merge(l, mid, r);\n}\n\n// void*\u578b\u6307\u9488\u7684\u4e00\u79cd\u7528\u6cd5\nint cmp(const void* v1, const void* v2)\n{\n    return ((LightHouse*)v1)-&gt;x - ((LightHouse*)v2)-&gt;x;\n}\nint main()\n{\n    int n; // the number of lighthouse\n    scanf(\"%d\", &amp;n);\n    lhs = new LightHouse[n];\n    for (int i = 0; i &lt; n; ++i)\n        scanf(\"%d %d\", &amp;lhs[i].x, &amp;lhs[i].y);\n    // \u9898\u76ee\u63d0\u793a\u53ef\u80fd\u8d85\u51faint\u8868\u793a\u8303\u56f4\uff0c\u6240\u4ee5\u7528long long\n    long long cnt = 0; // the number of sequence\n\n    qsort(lhs, n, sizeof(LightHouse), cmp);\n    // mergeSort(0, n); // sort based on x\n    int* y = new int[n];\n    for (int i = 0; i &lt; n; ++i)\n        y[i] = lhs[i].y;\n    invInside(y, 0, n, cnt); // compute cnt based on y\n\n    // \u4e24\u79cd\u8ba1\u7b97\u65b9\u5f0f\uff0c\u7b2c\u4e00\u4e2a\u662f\u7b97\u51fa\u9006\u5e8f\u5bf9\u7136\u540eC(n,2)\u51cf\u4e00\u4e0b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u76f4\u63a5\u7b97\u51fa\u987a\u5e8f\u5bf9\n    // printf(\"%lld\", (long long)(n)*(long long)(n-1)/(long long)(2) - cnt);\n    printf(\"%lld\", cnt);\n    delete[] lhs;\n    delete[] y;\n    return 0;\n}\n</code></pre>"},{"location":"solutions/thu/proper-rebuild/","title":"Proper Rebuild","text":""},{"location":"solutions/thu/proper-rebuild/#_1","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u7531\u7ed9\u5b9a\u7684\u5148\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u786e\u5b9a\u552f\u4e00\u7684\u771f\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217</p>"},{"location":"solutions/thu/proper-rebuild/#_2","title":"\u601d\u8def","text":"<p>\u771f\u4e8c\u53c9\u6811\u5373\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u4e8c\u53c9\u6811\u3002\u5229\u7528\u9012\u5f52\u7684\u601d\u8def\u521b\u5efa\u6811\uff0c\u7136\u540e\u4e2d\u5e8f\u904d\u5386\u4e00\u4e0b\u3002 \u5148\u5e8f\u904d\u5386\u7684\u5934\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u6839\u7ed3\u70b9\uff0c\u4e0b\u4e00\u4e2a\u4e00\u5b9a\u662f\u5de6\u5b69\u5b50</p>"},{"location":"solutions/thu/proper-rebuild/#_3","title":"\u95ee\u9898","text":"<p>\u6211\u8fc7\u4e8e\u60f3\u7528c++\u5199\u4e86\uff0c\u4f46\u662f\u5bf9c++\u53c8\u4ec5\u4ec5\u662f\u5165\u95e8\u9636\u6bb5\uff0c\u4ee5\u4e3a<code>struct</code>\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u4e00\u4e2a\u6210\u719f\u7684c++\u4ee3\u7801\u4e2d\uff0c\u540e\u6765\u624d\u53d1\u73b0\u6211\u9519\u4e86\uff0c\uff0c</p>"},{"location":"solutions/thu/proper-rebuild/#ac","title":"AC\u4ee3\u7801","text":"<pre><code>//  main.cpp\n//  ProperRebuild\n//\n//  Created by lip0041 on 2021/1/21.\n//\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nconst int MAX = 4e6 + 10;\nint pre[MAX];\nint post[MAX];\n\nstruct Node\n{\n    int data;\n    struct Node *left;\n    struct Node *right;\n};\n\n// \u521b\u5efa\u6811\nstruct Node *buildtree(int l1, int r1, int l2, int r2)\n{\n    // \u5f53\u524d\u6839\u7ed3\u70b9\n    struct Node *root = new struct Node;\n    root-&gt;data = pre[l1];\n    root-&gt;left = root-&gt;right = nullptr;\n    // p\u4e3a\u5f53\u524d\u6839\u7684\u5de6\u5b69\u5b50\u5728\u540e\u5e8f\u904d\u5386\u4e2d\u7684\u4f4d\u7f6e\n    int p = 0;\n    if (r2 == l2)\n        return root;\n    // \u627e\u4e0b\u4e00\u4e2a\u5de6\u6839\u5728post\u4e2d\u7684\u4f4d\u7f6e\n    for (int i = l2; i &lt;= r2; ++i)\n        if (post[i] == pre[l1 + 1])\n        {\n            p = i;\n            break;\n        }\n    // \u7531p\u5c06post\u5e8f\u5217\u5206\u5f00\uff0ct\u4e3a\u5de6\u8fb9\u5b50\u6811\u7684\u4e2a\u6570\n    int t = p - l2 + 1;\n    root-&gt;left = buildtree(l1 + 1, l1 + t, l2, p);\n    root-&gt;right = buildtree(l1 + t + 1, r1, p + 1, r2 - 1);\n    return root;\n}\n\n// \u4e2d\u5e8f\u904d\u5386\nvoid traversal(struct Node *root)\n{\n    if (root == nullptr)\n        return;\n    traversal(root-&gt;left);\n    cout &lt;&lt; root-&gt;data &lt;&lt; \" \";\n    traversal(root-&gt;right);\n}\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i)\n        cin &gt;&gt; pre[i];\n    for (int i = 0; i &lt; n; ++i)\n        cin &gt;&gt; post[i];\n    struct Node *root = buildtree(0, n - 1, 0, n - 1);\n    traversal(root);\n    return 0;\n}\n</code></pre>"}]}